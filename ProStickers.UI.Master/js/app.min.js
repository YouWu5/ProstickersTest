/* jshint -W117*/
(function () {
    'use strict';

    angular.module('app', [
        // Angular modules 
         'ui.router',
         'ngMessages',

        // Custom modules
         'app.blocks',
         'app.core',
         'app.layout',
         'app.home',
          'app.availabilityTime',
         'app.appointment',
         'app.ordersTracking',
         'app.colorChart',
         'app.customers',
         'app.feedback',
         'app.orderTracking',
         'app.predefinedSize',
         'app.report',
         'app.users',
        // 3rd Party Modules
        'ui.bootstrap',
        'angularSpinners',
        'ngBootbox',
        'LocalStorageModule',
        'jlareau.bowser'
    ]);

    // http://babyrificapi-test.azurewebsites.net/
    //346458318136-omb9u8vbhks11rtl2m131de4b0k63e06.apps.googleusercontent.com
    //649223693592-evksg4j74g6h2mgbbu7i3oh1ha6dv9ce.apps.googleusercontent.com
    angular.module('app').constant('appUrl', 'https://prostickersapi-test.azurewebsites.net/');

    angular.module('app').value('userInfo', {});

    customInterceptor.$inject = ['$q', '$injector', 'appUrl', '$location', '$rootScope', 'message', 'spinnerService', 'helper', 'localStorageService'];
    function customInterceptor($q, $injector, appUrl, $location, $rootScope, message, spinnerService, helper, localStorageService) {
        return {
            'responseError': function (rejection) {
                // do something on error
                if (rejection !== undefined && rejection !== null) {
                    if (rejection.status === 400) {

                        var errorObject = rejection.data.Message;
                        helper.setIsSubmitted(false);
                        if (errorObject !== null && errorObject !== '' && errorObject !== undefined && errorObject.Result !== null &&
                            errorObject.Result !== undefined && errorObject.Result !== '') {
                            var result = errorObject.Result;
                            if (result === 2 || result === 3 || result === 5) {                                 //2 for UDError and 3 for SDError , 5 for concurrency
                                message.showClientSideErrors(errorObject.Message);
                            }
                            else {
                                void 0;  // dont remove this logger this is used to get error for developmen puropse.

                            }
                        }
                    }

                    if (rejection.status === 401) {
                        localStorageService.set('LoginErrorMessage', rejection.data.Message);
                        window.location.reload();
                        void 0;
                    }

                    if (rejection.status === 404) {
                        message.showClientSideErrors('There was an error connecting to server.');
                    }

                    if (rejection.status === 409) {
                        void 0;
                    }

                    if (rejection.status === 410) {

                        void 0;
                    }

                    if (rejection.status === 500) {
                        helper.setIsSubmitted(false);
                        message.showClientSideErrors('Oops! something went wrong. Please try again.');
                    }

                    if (rejection.status === 0) {
                        helper.setIsSubmitted(false);
                        message.showClientSideErrors('There is network problem. Please check Internet connection.');
                    }

                    if (rejection.config.method === 'PUT' || rejection.config.method === 'POST') {
                        $rootScope.$broadcast('httpLoaderEnd', rejection.config.headers.loaderID);
                    }
                    if (rejection.status === 406 || rejection.status === 412) {
                        helper.setIsSubmitted(false);
                        message.showClientSideErrors(rejection.data.Message);
                    }
                    spinnerService.hide('layoutSpinner');
                    spinnerService.hide('pageContainerSpinner');
                    return $q.reject(rejection);
                }
                else {
                    spinnerService.hide('layoutSpinner');
                    spinnerService.hide('pageContainerSpinner');
                    return $q.reject(rejection);
                }

            },

            'request': function (config) {

                var token = localStorageService.get('AuthenticateData');

                if (token !== null) {
                    config.headers.Authorization = 'Bearer ' + token.access_token;
                }
                var usersession = localStorageService.get('UserSession');
                if (usersession !== null) {
                    config.headers.usersession = angular.toJson(usersession);
                }
                if (config.method === 'PUT' || config.method === 'POST') {
                    $rootScope.$broadcast('httpLoaderStart', 'pageContainerSpinner');
                }
                return config;
            },

            'response': function (response) {
                if (response.config.method === 'PUT' || response.config.method === 'POST') {
                    $rootScope.$broadcast('httpLoaderEnd', 'pageContainerSpinner');
                }
                return response;
            },

        };
    }
    angular.module('app').factory('httpRequestInterceptor', customInterceptor);

    function runConfig($rootScope, $state, message, spinnerService) {

        $rootScope.$on('$stateChangeStart', stateChangeStart);
        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);
        $rootScope.$on('$stateChangeError', stateChangeError);

        $rootScope.$state = $state;
        $rootScope.$on('httpLoaderStart', function (event, loaderID) {
            spinnerService.show(loaderID, 'Loading...');
        });

        $rootScope.$on('httpLoaderEnd', function (event, loaderID) {
            spinnerService.hide(loaderID);
        });


        function stateChangeStart() {

            var winEvent = window.event;
            if (winEvent !== undefined && winEvent instanceof ProgressEvent) {
                spinnerService.hide('layoutSpinner');
                event.preventDefault();
            }
            else {
                window.history.forward();
                //if (bowser.chrome === true || bowser.msedge === true) {
                //    message.showServerSideMessage(null, false);
                //}
                message.clearMessage();
                spinnerService.show('layoutSpinner');
            }
            document.body.scrollTop = document.documentElement.scrollTop = 0;
        }

        function stateChangeSuccess() {
            spinnerService.hide('layoutSpinner');
            message.clearMessage();
            document.body.scrollTop = document.documentElement.scrollTop = 0;
        }

        function stateChangeError() {
            spinnerService.hide('layoutSpinner');
        }

    }

    angular.module('app').filter('removeStringSpaces', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/[\s]/g, '');
        };
    }]);

    angular.module('app').filter('convertTimeFormat', [function () {
        // returns 12 hour format of time from 24 hour format
        return function (time) {
            time = time.toString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
            time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];
            if (time.length > 1) {
                time = time.slice(1);
                time[5] = +time[0] < 12 ? ' AM' : ' PM';
                time[0] = +time[0] % 12 || 12;
            }
            return time.join('');
        };
    }]);

    angular.module('app').config(['$httpProvider', function ($httpProvider) {
        $httpProvider.interceptors.push('httpRequestInterceptor');
    }])

    .run(runConfig);

})();
(function () {
    'use strict';

    angular.module('app.blocks', [
        // Angular modules 

        // Custom modules 

        // 3rd Party Modules
        
    ]);
})();

(function () {
    'use strict';

    angular.module('app.core', [
        // Angular modules 
      'ui.router'

        // Custom modules 

        // 3rd Party Modules

    ]);
})();



(function () {
    'use strict';

    angular
        .module('app.core')
        .factory('helper', helper);

    helper.$inject = ['$filter', '$rootScope'];
    var isSubmitted = false;

    function helper($filter, $rootScope) {
        var userInfoHelper = null;

        var service = {
            getHeight: getHeight,
            setHeight: setHeight,
            getIsSubmitted: getIsSubmitted,
            setIsSubmitted: setIsSubmitted,
            formatDate: formatDate,
            formatDateObject: formatDateObject,
            scrollToError: scrollToError,
            formatDateTime: formatDateTime
        };

        return service;

        function scrollToError() {
            $rootScope.$broadcast('scrollToError');
        }

        function getIsSubmitted() {
            return isSubmitted;
        }

        function setIsSubmitted(flag) {
            isSubmitted = flag;
        }

        function setHeight(obj) {
            userInfoHelper = obj;
        }

        function getHeight() {
            return userInfoHelper;
        }

        function formatDate(date) {
            return ($filter('date')(date, 'yyyy-MM-dd'));
        }
        function formatDateTime(date) {
            return ($filter('date')(date, 'yyyy-MM-ddTHH:mm'));

        }
        function formatDateObject(date) {
            return new Date(date);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.core')
        .factory('message', message);

    message.$inject = [];

    function message() {

        var lvMessage = null;
        var isShowRedirect = false;
        var service = {
            //message: message,
            showServerSideMessage: showServerSideMessage,
            showClientSideErrors: showClientSideErrors,
            showClientSideMessage: showClientSideMessage,
            clearMessage: clearMessage,
            getMessage: getMessage
        };

        return service;

        function showServerSideMessage(msg, RedirectValue) {
            isShowRedirect = RedirectValue;
            if (msg !== null) {
                if (msg.Result === 1) {
                    lvMessage = {
                        Result: msg.Result,
                        Message: msg.Message,
                        ReturnedData: msg.ReturnedData,
                        Key: msg.Key,
                        SourceName: msg.SourceName,
                        Class: 'successMsg',
                        ActionList: null
                    };

                }

                if (msg.Result === 2 || msg.Result === 3 || msg.Result === 5) {

                    lvMessage = {
                        Result: msg.Result,
                        Message: msg.Message,
                        ReturnedData: msg.ReturnedData,
                        Key: msg.Key,
                        SourceName: msg.SourceName,
                        Class: 'errorMsg',
                        ActionList: null
                    };
                }

                if (msg.Result === 4) {
                    lvMessage = {
                        Result: msg.Result,
                        Message: msg.Message,
                        ReturnedData: msg.ReturnedData,
                        Key: msg.Key,
                        SourceName: msg.SourceName,
                        Class: 'notificationMsg',
                        ActionList: null
                    };
                }
            }
        }
        function showClientSideErrors(msg) {
            lvMessage = {
                Result: 2,
                Message: msg,
                ReturnedData: null,
                Key: null,
                SourceName: null,
                Class: 'errorMsg',
                ActionList: null
            };
        }

        function showClientSideMessage(msg) {
            lvMessage = {
                Result: msg.Result,
                Message: msg.Message,
                ReturnedData: msg.ReturnedData,
                Key: msg.Key,
                SourceName: msg.SourceName,

                ActionList: null
            };
        }

        function clearMessage() {
            if (isShowRedirect !== true) {
                lvMessage = null;
            }
            else {
                isShowRedirect = false;
            }
        }

        function getMessage() {
            return lvMessage;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.core')
        .factory('stackView', stackView);

    stackView.$inject = ['$location', '$state'];

    function stackView($location, $state) {

        var viewsStack = [{
            controller: '',
            formObject: '',
            url: '/',
            formName: 'Home',
            templateUrl: '/app/home/home.html'
        }];

        var service = {
            viewsStack: viewsStack,
            pushViewDetail: pushObject,
            getLastFormObject: getLastFormObject,
            popFormObject: popFormObject,
            getLastViewDetail: getLastObject,
            getViewDetailAtIndex: getObjectAtIndex,
            removeViewDetailAtIndex: removeObjectAtIndex,
            getLastViewUrl: getLastViewUrl,
            getFormObjectOfController: getFormObjectOfController,
            getViewDetailOfController: getObjectOfController,
            isLastView: isLastView,
            discardViewDetail: discardObject,
            clearViewsStack: clearViewsStack,
            openView: openView,
            closeView: closeView,
            getViewStack: getViewStack,
            setViewStack: setViewStack,
            drillDownToView: drillDownToView,
            openParentView: openParentView,
            closeThisView: closeThisView,
            pushObject: pushObject,
            openHome: openHome
        };

        return service;

        function pushObject(obj) {
            if (viewsStack === null || viewsStack === '' || viewsStack === undefined) {
                viewsStack = [];
            }
            viewsStack.push({
                controller: obj.controller,
                formObject: obj.formObject,
                url: obj.url,
                formName: obj.formName,
                templateUrl: obj.templateUrl
            });
        }

        function getLastFormObject() {
            if (viewsStack.length > 0) {
                var obj = viewsStack[(viewsStack.length - 1)].formObject;
                return obj;
            }
            else {
                return null;
            }
        }

        function popFormObject() {
            if (viewsStack.length > 0) {

                var obj = viewsStack[(viewsStack.length - 1)].formObject;
                viewsStack.splice((viewsStack.length - 1), 1);

                return obj;
            }
            else {
                return null;
            }
        }

        function getLastObject() {
            if (viewsStack !== null && viewsStack.length > 0) {
                var obj = viewsStack[(viewsStack.length - 1)];
                return obj;
            }
            else {
                return viewsStack;
            }
        }

        function getObjectAtIndex(index) {
            return viewsStack[index];
        }

        function removeObjectAtIndex(index) {
            viewsStack.splice(index, 1);
        }

        function getLastViewUrl() {
            if (viewsStack.length > 0) {
                return viewsStack[viewsStack.length - 1].url;
            }
            else {
                return '#/1';
            }
        }

        function getFormObjectOfController(controller) {

            var index = viewsStack.map(function (x) { return x.controller; }).indexOf(controller);

            if (index !== -1) {
                return viewsStack[index].formObject;
            }
            else {
                return 'NotFound';
            }
        }

        function getObjectOfController(controller) {

            var index = viewsStack.map(function (x) { return x.controller; }).indexOf(controller);
            if (index !== -1) {
                return viewsStack[index];
            }
            else {
                return 'NotFound';
            }
        }

        function isLastView(controller) {
            var obj = getLastObject();
            if (obj !== null) {
                if (obj.controller === controller) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }

        function discardObject() {

            if (viewsStack.length > 0) {
                viewsStack.splice((viewsStack.length - 1), 1);
            }
        }

        function clearViewsStack() {
            viewsStack = [];
        }

        function openView(url) {
            $state.go(url, { redirect: true });
        }

        function closeView() {
            var url = getLastViewUrl();
            //var obj = viewsStack[(viewsStack.length - 1)].formObject
            //viewsStack.splice((viewsStack.length - 1), 1);

            $state.go(url, { redirect: true });
        }

        function getViewStack() {
            return viewsStack;
        }

        function setViewStack(stack) {
            viewsStack = stack;
        }

        function drillDownToView(url, formObject) {
            pushObject(formObject);
            $location.path(url);
        }

        function closeThisView() {
            var url = getLastViewUrl();

            viewsStack.splice((viewsStack.length - 1), 1);
            $state.go(url, { redirect: true });
        }

        function openParentView() {
            var url = getLastViewUrl();
            $location.path(url);
        }

        function openHome() {
            while (viewsStack.length > 1) {
                viewsStack.splice((viewsStack.length - 1), 1);
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.home')
        .controller('designerHome', designerHome);

    designerHome.$inject = ['$state', 'stackView', 'AppointmentListFactory'];

    function designerHome($state, stackView, AppointmentListFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Customer Appointments';
        fo.lv.setFooterPaddingRecord = null;

        function initilizeController() {

            var obj = stackView.getLastViewDetail();

            if (obj.formName === 'AppointmentList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
            }

            else {
                AppointmentListFactory.getList().then(function (data) {
                    void 0;
                    fo.vm = data;
                });
            }
        }

        initilizeController();

        fo.OpenDetail = function (Number, Date) {
            stackView.pushViewDetail({
                controller: 'AppointmentList',
                formObject: fo, url: 'AppointmentList',
                formName: 'AppointmentList'
            });
            $state.go('AppointmentDetail', { OrderNumber: Number, OrderDate: Date });
        };


        fo.showMore = function () {
            $state.go('Appointments');
        };
    }
})();

(function () {
    'use strict';

    angular.module('app.home', [
        // Angular modules 
        'ui.router'

        // Custom modules 
   
        // 3rd Party Modules

    ]);
})();

angular.module('app.home').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider
         .state('/', {
             url: '',
             templateUrl: '/app/home/home.html',
         })
        .state('404', {
            url: '/404',
            templateUrl: '/app/home/404.html'
        })
    .state('serviceTerms', {
        url: '/serviceterms',
        templateUrl: '/app/home/serviceTerms.html'
    })
    .state('privacyPolicy', {
        url: '/privacypolicy',
        templateUrl: '/app/home/privacyPolicy.html'
    });
}]);
(function () {
    'use strict';

    angular
        .module('app')
        .controller('masterHome', masterHome);

    masterHome.$inject = ['$location', '$state', 'stackView', 'FeedbackListFactory'];

    function masterHome($location, $state, stackView, FeedbackListFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Customer Feedbacks';
        fo.lv.setFooterPaddingNoRecord = null;

        initializeController();

        function initializeController() {
            FeedbackListFactory.getCustomerFeedbackList().then(function (data) {
                fo.vm = data;
                void 0;
            });
        }

        fo.viewMore = function () {
            $state.go('FeedbackList');
        };

        fo.OpenDetail = function (customerId, designNo) {
            stackView.pushViewDetail({
                controller: 'masterHome',
                formObject: fo, url: '/',
                formName: 'Home'
            });
            $state.go('FeedbackDetail', { ID: customerId, DesignNo: designNo, redirect: true });
        };

    }
})();

(function () {
    'use strict';

    angular.module('app.layout', [
        // Angular modules 
          'ui.router',

        // Custom modules 
       
        // 3rd Party Modules

    ]);
})();


(function () {
    'use strict';

    angular
        .module('app.layout')
        .factory('messagesFactory', messagesFactory);

    messagesFactory.$inject = ['$http', '$q', 'appUrl'];

    function messagesFactory($http, $q,  appUrl) {
        var service = {
            print: printPage,
            printDetail: printDetail
        };

        return service;

        function printPage(url) {

            var def = $q.defer();

            $http.post(appUrl + url).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });

            return def.promise;

        }

        function printDetail(obj) {
            var def = $q.defer();

            $http.post(appUrl + 'Print/TransactionDetail/' + obj.Id + '/' + 'false' + '/' + obj.ReportId, null, { headers: { 'loaderID': 'pageContainerSpinner' } })
            .then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });

            return def.promise;
        }


    }
})();
(function () {
    'use strict';

    angular
        .module('app.layout')
        .controller('Messages', Messages);

    Messages.$inject = ['message', 'stackView', 'messagesFactory', 'helper'];

    function Messages(message, stackView, messagesFactory, helper) {

        var msg = this;

        function initializeController() {



        }

        initializeController();

        msg.messageExist = function () {

            if (message.getMessage() === null) {
                return false;
            }
            else {
                return true;
            }
        };

        msg.getMessage = function () {
            msg.height = helper.getHeight();
            
            return message.getMessage();
        };

        msg.clearMessage = function () {
            message.clearMessage();
        };

        msg.openViewFromUserMessage = function (item) {

            if (item.action === 'Detail') {
                if (item.listController !== '') {
                    var obj = stackView.getFormObjectOfController(item.listController);
                    if (obj !== 'NotFound') {
                        obj.lv.id = item.returnedData;
                        stackView.openView(item.viewUrl);
                    }
                }

            }
            if (item.action === 'TransactionDetail') {
                stackView.pushObject(item.returnedData);
                stackView.openView(item.viewUrl);
            }
        };

        msg.printFromUserMessage = function (item) {
            message.clearMessage();
            messagesFactory.printDetail(item.returnedData).then(function (data) {
                location.href = data;
            });
        };
    }
})();
(function () {
    'use strict';

    angular
        .module('app.layout')
        .factory('shellFactory', shellFactory);

    shellFactory.$inject = ['$http', '$q', 'appUrl'];

    function shellFactory($http, $q, appUrl) {
        var service = {
            ObtainLocalAccessToken: ObtainLocalAccessToken,
            GetUserSession: GetUserSession,
            LogOut: LogOut,
            submit:submit
        };

        return service;

        function ObtainLocalAccessToken(data) {
            var def = $q.defer();
            $http.get(appUrl + 'User/Account/' + data.provider + '/' + data.external_access_token + '/' + data.external_user_id + '/1/ObtainLocalAccessToken')
            .then(function (response) {
                def.resolve(response.data);

            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function submit(UserID, SourceID) {
            var def = $q.defer();
            $http.post(appUrl + 'User/Account/' + UserID + '/' + SourceID + '/AcceptSignInPolicy')
            .then(function (response) {
                def.resolve(response.data);

            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function GetUserSession(userID) {
            var def = $q.defer();
            $http.get(appUrl + 'User/Account/' + userID + '/GetUserSession')
            .then(function (response) {

                def.resolve(response.data);

            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function LogOut() {
            var def = $q.defer();
            $http.post(appUrl + 'User/Account/LogOut')
            .then(function (response) {

                def.resolve(response.data);

            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.layout')
        .controller('Shell', Shell);

    Shell.$inject = ['userInfo', '$location', 'message', 'helper', '$state', 'stackView', 'shellFactory', '$scope', '$http', 'localStorageService', '$window', 'appUrl', 'AppointmentCreateFactory'];

    function Shell(userInfo, $location, message, helper, $state, stackView, shellFactory, $scope, $http, localStorageService, $window, appUrl, AppointmentCreateFactory) {
        var shl = this;
        shl.vm = {};
        shl.lv = {};
        shl.lv.title = 'Add request for appointment';
        shl.lv.redirectToShell = false;
        shl.lv.AssignedModuleList = [];
        shl.vm.isRequiredLogin = false;
        shl.lv.UserName = '';
        shl.lv.errorMessage = null;
        shl.lv.isAgree = false;
        shl.lv.currentDate = new Date();
        shl.lv.topHeightPaddingOne = null;
        shl.lv.setFooterPaddingForm = null;
        shl.lv.setAgreementContainerHeight = null;
        shl.lv.form = false;
        shl.lv.isFormInvalid = false;
        shl.lv.appointmentCount = 0;

        var initializeController = function () {
            function getCount() {
                AppointmentCreateFactory.getAppointmentRequestCount().then(function (data) {
                    shl.lv.appointmentCount = data;
                });
                setTimeout(getCount, 30000);
            }
            getCount();
            //var getToken = localStorageService.get('AuthenticateData');
            //if (getToken !== null) {

            //    shl.vm.isRequiredLogin = true;
            //}
            //else {
            //    shl.vm.isRequiredLogin = false;
            //}

            //var sesion = localStorageService.get('UserSession');
            //if (sesion !== null) {
            //    userInfo = sesion.UserViewModel;
            //    shl.lv.UserName = sesion.UserViewModel.Name;
            //    shl.lv.AssignedModuleList = sesion.UserViewModel.AssignedPageList;
            //    shl.lv.AcceptSignInPolicy = userInfo.AcceptSignInPolicy;
            //}
            //shl.lv.errorMessage = localStorageService.get('LoginErrorMessage');
            //if (shl.lv.errorMessage !== null) {
            //    localStorageService.set('LoginErrorMessage', null);
            //}

            //shl.lv.redirectToShell = false;
        };

        initializeController();

        shl.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            if (shl.openedStart === true) {
                shl.openedStart = false;
            }
            else if (opened === 'openedStart') {

                shl.openedEnd = false;
                shl.openedStart = true;
            }
            if (shl.openedEnd === true) {
                shl.openedEnd = false;
            }
            else if (opened === 'openedEnd') {
                shl.openedStart = false;
                shl.openedEnd = true;
            }
        };

        shl.initializeViewsStack = function () {
            stackView.clearViewsStack();
            stackView.pushViewDetail({
                controller: 'HomeController', formObject: null, url: '/1', formName: 'Home'
            });
        };

        shl.service = function () {
            void 0;
            $state.go('serviceTerms');
        };

        shl.privacyPolicy = function () {
            void 0;
            $state.go('privacyPolicy');
        };

        ///mobile menu toggle 
        shl.menuToggle = function () {
            $('#wrapper').toggleClass('active');
            $('.overlay').toggleClass('Hidden');
        };

        shl.menuTogglepage = function () {
            $('#wrapper').removeClass('active');
            $('.overlay').removeClass('Hidden');
        };

        //shl.authenticate = function (provider) {
        //    var redirectUri = location.protocol + '//' + location.host + '/startup.html';
        //    var externalProviderUrl = appUrl + 'User/Account/ExternalLogin?provider=' + provider + '&sourceID=1' +
        //        '&response_type=token&client_id=' + clienrId +
        //        '&redirect_uri=' + redirectUri;
        //    window.$windowScope = $scope;
        //    console.log('externalProviderUrl', externalProviderUrl);
        //    window.open(externalProviderUrl, 'Authenticate Account', 'location=0,status=0,width=600,height=750');

        //};


        $scope.authCompletedCB = function (fragment) {

            $scope.$apply(function () {
                shellFactory.ObtainLocalAccessToken(fragment).then(function (data) {

                    localStorageService.set('AuthenticateData', data);

                    shellFactory.GetUserSession(data.userID).then(function (data) {
                        void 0;
                        shl.vm.isRequiredLogin = true;
                        userInfo = data.UserViewModel;
                        shl.lv.UserName = data.UserViewModel.Name;
                        message.clearMessage();
                        localStorageService.set('UserSession', data);
                        shl.lv.AcceptSignInPolicy = userInfo.AcceptSignInPolicy;
                        shl.lv.AssignedModuleList = data.UserViewModel.AssignedPageList;
                    });
                });

            });
        };

        shl.submitAgreement = function () {
            shellFactory.submit(userInfo.UserID, userInfo.SourceID).then(function () {
                shellFactory.GetUserSession(userInfo.UserID).then(function (data) {
                    userInfo = data.UserViewModel;
                    shl.lv.UserName = data.UserViewModel.Name;
                    message.clearMessage();
                    localStorageService.set('UserSession', data);
                    shl.lv.AcceptSignInPolicy = userInfo.AcceptSignInPolicy;
                    shl.lv.AssignedModuleList = data.UserViewModel.AssignedPageList;
                });
            });
        };

        shl.LogOut = function () {
            localStorageService.set('UserSession', null);
            shellFactory.LogOut();
            localStorageService.set('AuthenticateData', null);
            shl.vm.isRequiredLogin = false;
        };

        ////////////////////////////-------appointment popup code start------///////////////////////////
        shl.lv.fulldayList = [];
        shl.Login = function (admin) {
            shl.vm.isRequiredLogin = true;
            if (admin === 'master') {
                shl.lv.IsMaster = true;
                shellFactory.GetUserSession('Silome.Jain@gmail.com').then(function (data) {
                    userInfo = data;
                    shl.lv.UserName = data.Name;
                    localStorageService.set('UserSession', data);
                    shl.lv.AssignedModuleList = data.AssignedPageList;
                });
            }

            if (admin === 'designer') {
                shl.lv.IsMaster = false;
                shellFactory.GetUserSession('abhi@gmail.com').then(function (data) {
                    userInfo = data;
                    shl.lv.UserName = data.Name;
                    localStorageService.set('UserSession', data);
                    shl.lv.AssignedModuleList = data.AssignedPageList;
                });
            }
        };

        shl.overlayForm = function () {
            shl.lv.messages = '';
            shl.lv.color = '';
            shl.lv.form = true;
            helper.setIsSubmitted(false);
            var date = helper.formatDate(new Date());
            AppointmentCreateFactory.getDefault().then(function (data) {
                shl.lv.viewmodel = data;
                shl.lv.viewmodel.AppointmentDate = shl.lv.viewmodel.AppointmentDate === '0001-01-01T00:00:00' ? new Date() : shl.lv.viewmodel.AppointmentDate;
                shl.lv.RequestDateTime = angular.copy(shl.lv.viewmodel.RequestDateTime.split('-'));
                shl.lv.startDateOptions = {
                    startingDay: 1,
                    showWeeks: false,
                    initDate: null,
                    minDate: new Date(shl.lv.viewmodel.AppointmentDate)
                };
                AppointmentCreateFactory.getSlotList(date).then(function (data) {
                    if (data.length === 0) {
                        shl.lv.messages = 'You can not book appointment as you have not saved any available slot for this day.';
                        shl.lv.color = 'red';
                    }
                    shl.lv.fulldayList = data;
                    shl.lv.viewmodel.TimeSlotID = shl.lv.fulldayList[0].Value;
                });
            });

        };

        shl.isSubmitted = function () {
            return helper.getIsSubmitted();
        };

        shl.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            if (shl.openedStart === true) {
                shl.openedStart = false;
            }
            else if (opened === 'openedStart') {

                shl.openedEnd = false;
                shl.openedStart = true;
            }
            if (shl.openedEnd === true) {
                shl.openedEnd = false;
            }
            else if (opened === 'openedEnd') {
                shl.openedStart = false;
                shl.openedEnd = true;
            }
        };


        shl.Close = function () {
            shl.lv.form = false;
        };

        shl.save = function () {
            shl.lv.messages = '';
            //if ($scope.AppointmentRequestForm.$invalid) {
            //    shl.lv.isFormInvalid = true;
            //    helper.scrollToError();
            //    return;
            //}

            if (shl.lv.fulldayList.length > 0) {
                for (var i = 0; i < shl.lv.fulldayList.length; i++) {
                    if (shl.lv.fulldayList[i].Value === shl.lv.viewmodel.TimeSlotID) {
                        shl.lv.viewmodel.TimeSlot = shl.lv.fulldayList[i].Text;
                        shl.lv.viewmodel.EndTime = shl.lv.fulldayList[i].EndTime;
                        shl.lv.viewmodel.StartTime = shl.lv.fulldayList[i].StartTime;
                    }
                }
            }
            else {
                shl.lv.messages = 'You can not book appointment as you have not saved any available slot for this day.';
                shl.lv.color = 'red';
                return;
            }

            if (shl.lv.viewmodel.TimeSlot === null) {
                return;
            }
            void 0;
            helper.setIsSubmitted(true);
            AppointmentCreateFactory.submit(shl.lv.viewmodel).then(function (data) {
                void 0;
                message.showServerSideMessage(data, true);
                helper.setIsSubmitted(false);
                shl.lv.form = false;
            });
        };

        shl.setTime = function () {
            shl.lv.viewmodel.AppointmentDate = helper.formatDate(shl.lv.viewmodel.AppointmentDate);
            AppointmentCreateFactory.getSlotList(shl.lv.viewmodel.AppointmentDate).then(function (data) {
                shl.lv.fulldayList = data;
                if (data.length === 0) {
                    shl.lv.messages = 'You can not book appointment as you have not saved any available slot for this day.';
                    shl.lv.color = 'red';
                    return;
                }
                shl.lv.viewmodel.TimeSlotID = shl.lv.fulldayList[0].Value;
            });
        };

        ////////////////////////////-------appointment popup code end------///////////////////////////

    }
})();

/*global $ */
(function () {
    'use strict';
    angular
         .module('app.blocks').directive('trackActive', ['$location', function ($location) {
             function link(scope, element) {
                 scope.$watch(function () {
                     return $location.path();
                 }, function () {
                     var links = element.find('a');
                     links.removeClass('active');
                     links.parents('li').removeClass('active');

                     angular.forEach(links, function (value) {
                         var a = angular.element(value);
                         var url = '#' + $location.path();
                         var split = url.split('/');
                         var urlsplit = split[0] + '/' + split[1];
                         if (urlsplit === '#/1') {
                             $('.sidebar-nav li#active').addClass('active');
                         }
                         if (a.attr('href') === urlsplit) {
                             a.parent('ul.nav-second-level li').addClass('active');
                             a.addClass('active').parents('ul.nav-second-level li').addClass('active');
                             a.addClass('active').parents('ul.nav-second-level li').siblings();
                            

                         }
                     });
                 });
             }
             return { link: link };
         }]);
})();


(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('allTextLowerCase', allTextLowerCase);

    allTextLowerCase.$inject = ['$parse'];

    function allTextLowerCase($parse) {

        var directive = {
            link: link,
            require: 'ngModel',
            restrict: 'AE'
        };

        return directive;

        function link(scope, element, attrs, modelCtrl) {
            var lower = function (inputValue) {
                if (inputValue != null) {
                    inputValue = inputValue.toLowerCase();
                    return inputValue;
                }
            };
            modelCtrl.$parsers.push(lower);
            lower($parse(attrs.ngModel)(scope));
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('capitalizeFirst', capitalizeFirst);

    capitalizeFirst.$inject = ['$parse'];

    function capitalizeFirst($parse) {

        var directive = {
            link: link,
            require: 'ngModel',
            restrict: 'AE'
        };

        return directive;

        function link(scope, element, attrs, modelCtrl) {
            var capitalize = function (inputValue) {
                var capitalFirst = '';
                if (inputValue !== null) {
                    var res = inputValue.split(' ');
                    angular.forEach(res, function (value) {
                        var capitalized = value.charAt(0).toUpperCase() + value.substring(1) + ' ';
                        capitalFirst += capitalized;
                    });
                    capitalFirst = capitalFirst.trim();
                    return capitalFirst;
                }

            };

            modelCtrl.$parsers.push(capitalize);
            capitalize($parse(attrs.ngModel)(scope));
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('dateGreaterThan', dateGreaterThan);

    dateGreaterThan.$inject = ['$filter'];

    function dateGreaterThan($filter) {
        
        var directive = {
            link: link,
            restrict: 'A',
            require: 'ngModel',
        };
        return directive;

        function link(scope, elem, attrs, ngModelCtrl) {
            var dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/);
           ngModelCtrl.$parsers.unshift(function (value) {
                var minDate, maxDate;
                var isValid = true;

                if (typeof value === 'object') {
                    ngModelCtrl.$setValidity('dateGreaterThan', true);
                    return value;
                }

                if (typeof value === 'string') {
                    if (value !== null && value !== '') {
                        isValid = dRegex.test(value);
                        ngModelCtrl.$setValidity('dateGreaterThan', isValid);

                        if (isValid) {
                            /* Here always the case of start date , here two max date i.e. today date and in case of sale order tentative delivery date */

                            minDate = scope.$eval(attrs.minDate);
                            maxDate = scope.$eval(attrs.maxDate);
                            void 0;

                            var dateArray = value.split('/');

                            var date = new Date(dateArray[2], dateArray[0] - 1, dateArray[1]).setHours(0, 0, 0, 0);
                            date = new Date(date).setHours(0, 0, 0, 0);

                            if (minDate !== undefined && minDate !== null && minDate !== '') {
                                minDate = new Date(minDate).setHours(0, 0, 0, 0);

                                if (date < minDate) {
                                    isValid = false;
                                    ngModelCtrl.$setValidity('dateGreaterThan', isValid);
                                }
                            }

                            if (maxDate !== undefined && maxDate !== null && maxDate !== '') {
                                maxDate = new Date(maxDate).setHours(0, 0, 0, 0);
                               

                                if (date > maxDate) {
                                    isValid = false;
                                    ngModelCtrl.$setValidity('dateGreaterThan', isValid);
                                }
                            }
                        }

                        if (!isValid) {
                            return undefined;
                        }

                        var fragments = value.split('/');

                        var result = new Date(Date.UTC(fragments[2], fragments[0] - 1, fragments[1]));

                        return result;
                    }
                    else {
                        ngModelCtrl.$setValidity('dateGreaterThan', true);
                        return value;
                    }
                }

                return value;
            });

            ngModelCtrl.$parsers.push(function (value) {
                return value;
            });

            scope.$watch(attrs.dateGreaterThan, function () {
                var minDate = scope.$eval(attrs.dateGreaterThan);  // other date 

                if (minDate !== undefined && minDate !== null && minDate !== '' && ngModelCtrl.$modelValue !== undefined && ngModelCtrl.$modelValue !== null && ngModelCtrl.$modelValue !== '') {
                    minDate = new Date(minDate).setHours(0, 0, 0, 0);

                    if (new Date(ngModelCtrl.$modelValue).setHours(0, 0, 0, 0) < minDate) {

                        ngModelCtrl.$setViewValue($filter('date')(new Date(minDate), 'MM/dd/yyyy'));
                        ngModelCtrl.$render();
                    }
                }
            });
        }
    }

})();
(function () {
    'use strict';

    angular.module('app.blocks')
  .directive('datepickerNeutralTimezone', ['bowser', function (bowser) {
      return {
          restrict: 'A',
          priority: 1,
          require: 'ngModel',
          link: function (scope, element, attrs, ctrl) {

              if (bowser.firefox === true || bowser.msedge === true) {
                  ctrl.$formatters.push(function (value) {

                      if (value !== null) {
                          var date = new Date(value);
                          return date;
                      } else {
                          return null;
                      }
                  });
                  ctrl.$parsers.push(function (value) {
                      if (value !== null) {
                          if (value.getTimezoneOffset() < 0) {
                              var date = new Date(value.getTime() - (60000 * value.getTimezoneOffset()));
                              return date;
                          }
                          else {
                              var date1 = new Date(value.getTime() + (60000 * value.getTimezoneOffset()));
                              return date1;
                          }

                      } else {
                          return null;
                      }
                  });
              }
              else {
                  ctrl.$formatters.push(function (value) {
                      var date;
                      if (value !== null) {
                          date = new Date(value);
                          date = new Date(date.getTime() + (60000 * date.getTimezoneOffset()));
                      }
                      return date;
                  });
                  ctrl.$parsers.push(function (value) {
                      if (value !== null) {
                          if (value.getTimezoneOffset() < 0) {
                              var date = new Date(value.getTime() - (60000 * value.getTimezoneOffset()));
                              return date;
                          }
                          else {
                              var date1 = new Date(value.getTime() + (60000 * value.getTimezoneOffset()));
                              return date1;
                          }

                      } else {
                          return null;
                      }
                  });
              }
          }
      };
  }]);
})();
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('datepickerPattern', datepickerPattern);
     
    function datepickerPattern() {
        var dRegex;
        var directive = {
            restrict: 'A',
            require: 'ngModel',
            link: link

        };
        return directive;

        function link(scope, elem, attrs, ngModelCtrl) {
            dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/);
            ngModelCtrl.$parsers.unshift(function (value) {

                if (attrs.datepickerPattern === 'FiscalYear') {
                    var formname = ngModelCtrl.$$parentForm.$name;
                    scope.$parent[formname].StartDate.$setValidity('datepickerPattern', true);
                    scope.$parent[formname].EndDate.$setValidity('datepickerPattern', true);
                }

                if (typeof value === 'string') {

                    validate(ngModelCtrl);

                    if (value !== null && value !== '') {
                        var isValid = dRegex.test(value);
                        ngModelCtrl.$setValidity('datepickerPattern', isValid);

                        if (isValid) {
                            var minDate, maxDate;
                            var name = ngModelCtrl.$$parentForm.$name;
                            if (attrs.datepickerPattern === 'StartDate') {
                                minDate = scope.$eval(attrs.minDate);
                                maxDate = scope.$eval(attrs.maxDate);
                                var dStart = value.split('/');
                                var dateStart = new Date(dStart[2], dStart[0] - 1, dStart[1]).setHours(0, 0, 0, 0);
                                if (minDate !== undefined && minDate !== null && minDate !== '') {
                                    minDate = new Date(minDate).setHours(0, 0, 0, 0);
                                    if (dateStart < minDate) {
                                        isValid = false;
                                        ngModelCtrl.$setValidity('datepickerPattern', isValid);
                                    }
                                }

                                if (maxDate !== undefined && maxDate !== null && maxDate !== '') {
                                    maxDate = new Date(maxDate).setHours(0, 0, 0, 0);
                                    if (dateStart > maxDate) {
                                        isValid = false;
                                        ngModelCtrl.$setValidity('datepickerPattern', isValid);
                                    }
                                    else {
                                        if (scope[name].EndDate) {
                                            var newEnd = scope[name].EndDate.$viewValue.split('/');
                                            if ((new Date(dStart[2], dStart[0] - 1, dStart[1]) <= new Date(newEnd[2], newEnd[0] - 1, newEnd[1])) &&
                                                    (new Date(newEnd[2], newEnd[0] - 1, newEnd[1]) <= (scope.fo.lv.EndDate))) {

                                                scope[name].EndDate.$setValidity('datepickerPattern', true);
                                            }
                                        }
                                    }
                                }
                            }

                            if (attrs.datepickerPattern === 'EndDate') {

                                minDate = scope.$eval(attrs.minDate);
                                maxDate = scope.$eval(attrs.maxDate);
                                var dEnd = angular.copy(value.split('/'));
                                var dateEnd = new Date(dEnd[2], dEnd[0] - 1, dEnd[1]).setHours(0, 0, 0, 0);
                                if (minDate !== undefined && minDate !== null && minDate !== '') {
                                    minDate = new Date(minDate).setHours(0, 0, 0, 0);

                                    if (dateEnd < minDate) {
                                        isValid = false;
                                        ngModelCtrl.$setValidity('datepickerPattern', isValid);
                                    }
                                    else {
                                        if (scope[name].StartDate.$viewValue !== undefined && scope[name].StartDate.$viewValue !== null) {
                                            var newDate = scope[name].StartDate.$viewValue.split('/');
                                            if ((new Date(dEnd[2], dEnd[0] - 1, dEnd[1]) >= new Date(newDate[2], newDate[0] - 1, newDate[1]) &&
                                                (new Date(newDate[2], newDate[0] - 1, newDate[1]) >= (scope.fo.lv.StartDate)))) {
                                                scope[name].StartDate.$setValidity('datepickerPattern', true);
                                            }
                                        }
                                    }
                                }

                                if (maxDate !== undefined && maxDate !== null && maxDate !== '') {
                                    maxDate = new Date(maxDate).setHours(0, 0, 0, 0);

                                    if (dateEnd > maxDate) {
                                        isValid = false;
                                        ngModelCtrl.$setValidity('datepickerPattern', isValid);
                                    }
                                }

                            }
                        }

                        if (!isValid) {
                            return undefined;
                        }

                        var fragments = value.split('/');
                        var result = new Date(fragments[2], fragments[0] - 1, fragments[1]);
                        return result;
                    }
                    else {
                        ngModelCtrl.$setValidity('datepickerPattern', true);
                    }

                    return value;
                }

                if (typeof value === 'object') {
                    ngModelCtrl.$setValidity('datepickerPattern', true);
                    return value;
                }

                return value;
            });

            ngModelCtrl.$parsers.push(function (value) {
                return value;
            });
        }

        function validate(ngModelCtrl) {

            var dateMonth = (ngModelCtrl.$$lastCommittedViewValue).split('/');
            if (dateMonth[0] !== null) {
                if (dateMonth[0] === '04' || dateMonth[0] === '06' || dateMonth[0] === '09' || dateMonth[0] === '11') {
                    dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[00])[- \/.](19|20)\d\d/);
                }
                else if (dateMonth[0] === '01' || dateMonth[0] === '03' || dateMonth[0] === '05' || dateMonth[0] === '07' ||
                     dateMonth[0] === '08' || dateMonth[0] === '10' || dateMonth[0] === '12') {
                    dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/);
                }
                else if (dateMonth[0] === '02') {
                    var leapYear = ((dateMonth[2] % 4 === 0) && (dateMonth[2] % 100 !== 0)) || (dateMonth[2] % 400 === 0);
                    if (leapYear === true) {
                        dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9])[- \/.](19|20)\d\d/);
                    }
                    else {
                        dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-8])[- \/.](19|20)\d\d/);
                    }

                }
            }
        }

    }

})();
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('dateSmallerThan', dateSmallerThan);

    function dateSmallerThan() {

        var directive = {
            link: link,
            restrict: 'A',
            require: 'ngModel',
        };

        return directive;

        function link(scope, elem, attrs, ngModelCtrl) {

            var dRegex = new RegExp(/(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.](19|20)\d\d/);
            ngModelCtrl.$parsers.unshift(function (value) {
                var minDate, maxDate;
                var isValid = true;
                if (typeof value === 'object') {
                    ngModelCtrl.$setValidity('dateSmallerThan', true);

                    return value;
                }

                if (typeof value === 'string') {


                    if (value !== null && value !== '') {
                        isValid = dRegex.test(value);

                        ngModelCtrl.$setValidity('dateSmallerThan', isValid);

                        if (isValid) {
                            minDate = scope.$eval(attrs.minDate);
                            maxDate = scope.$eval(attrs.maxDate);
                            /* Here always the case of start date , here two max date i.e. today date and in case of sale order tentative delivery date */

                            var dateArray = value.split('/');
                            var date = new Date(dateArray[2], dateArray[0] - 1, dateArray[1]).setHours(0, 0, 0, 0);

                            if (minDate !== undefined && minDate !== null && minDate !== '') {
                                minDate = new Date(minDate).setHours(0, 0, 0, 0);
                                if (date < minDate) {
                                    isValid = false;
                                    ngModelCtrl.$setValidity('dateSmallerThan', isValid);
                                }
                            }

                            if (maxDate !== undefined && maxDate !== null && maxDate !== '') {
                                maxDate = new Date(maxDate).setHours(0, 0, 0, 0); // contain today date

                                if (date > maxDate) {
                                    isValid = false;
                                    ngModelCtrl.$setValidity('dateSmallerThan', isValid);
                                }
                            }
                        }

                        if (!isValid) {
                            return undefined;
                        }
                        var fragments = value.split('/');

                        var result = new Date(Date.UTC(fragments[2], fragments[0] - 1, fragments[1]));

                        return result;
                    }
                }

                return value;
            });

            ngModelCtrl.$parsers.push(function (value) {

                return value;
            });

            scope.$watch(attrs.dateSmallerThan, function () {
                var maxDate = scope.$eval(attrs.dateSmallerThan);  // other date 
                if (maxDate !== undefined && maxDate !== null && maxDate !== '' && ngModelCtrl.$modelValue !== undefined && ngModelCtrl.$modelValue !== null && ngModelCtrl.$modelValue !== '') {
                    maxDate = new Date(maxDate).setHours(0, 0, 0, 0);
                    if (new Date(ngModelCtrl.$modelValue).setHours(0, 0, 0, 0) > maxDate) {
                        ngModelCtrl.$setViewValue((new Date(maxDate), 'MM/dd/yyyy'));
                        ngModelCtrl.$render();
                    }
                }
            });

        }
    }

})();
(function () {
    'use strict';

    angular.module('app.blocks')
  .directive('datetimepickerNeutralTimezone', ['bowser', function (bowser) {
      return {
          restrict: 'A',
          priority: 1,
          require: 'ngModel',
          link: function (scope, element, attrs, ctrl) {
              if (bowser.firefox === true || bowser.msedge === true) {
                  ctrl.$formatters.push(function (value) {
                      if (value !== null) {
                          var date = new Date(value);
                          return date;
                      }
                  });
                  ctrl.$parsers.push(function (value) {
                      if (value !== null) {
                          return value;
                      }
                  });
              }
              else {
                  ctrl.$formatters.push(function (value) {
                      var date;
                      if (value !== null) {
                          date = new Date(Date.parse(value));
                          date = new Date(date.getTime() + (60000 * date.getTimezoneOffset()));
                      }
                      return date;
                  });
                  ctrl.$parsers.push(function (value) {
                      if (value !== null) {
                          return value;
                      }
                  });
              }
          }
      };
  }]);
})();
/*global $ */
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('fileRead', fileRead);

    fileRead.$inject = ['message', '$timeout'];

    function fileRead(message, $timeout) {
        var directive = {
            link: link,
            restrict: 'EA',
            scope: {
                fileRead: '=',
            },
        };
        return directive;

        function link(scope, element) {
            element.bind('change', function (changeEvent) {
                scope.fileInput = $('.filestyle');
                scope.maxSize = 256000;
                var ext = changeEvent.target.files[0].name.split('.').pop().toLowerCase();
                var fileSize = scope.fileInput.get(0).files[0].size; // in bytes 
                var allow = true;
                var _URL = window.URL || window.webkitURL;
                var image;

                image = new Image();
                image.onload = function () {

                    if (fileSize > scope.maxSize) {
                        $timeout(function () {
                            message.showClientSideErrors('Please select image with appropriate size (Maximum 250 KB).');
                        });
                        element.val(null);
                    }

                    else if ($.inArray(ext, ['png', 'jpg', 'jpeg']) === -1) {
                        allow = false;
                        $timeout(function () {
                            message.showClientSideErrors('Please select image with valid extension.');
                        });
                        element.val(null);
                    }

                    else {
                        var reader = new FileReader();
                        reader.onload = function (loadEvent) {
                            scope.$apply(function () {
                                scope.fileRead = loadEvent.target.result;
                            });
                        };
                        reader.readAsDataURL(changeEvent.target.files[0]);
                        message.clearMessage();
                    }
                };
                image.src = _URL.createObjectURL(this.files[0]);
            });
        }
    }
})();

/*global $ */
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('fileReadUserImage', fileReadUserImage);

    fileReadUserImage.$inject = ['message', '$timeout'];

    function fileReadUserImage(message, $timeout) {
        var directive = {
            link: link,
            restrict: 'EA',
            scope: {
                fileReadUserImage: '=',
            },
        };
        return directive;

        function link(scope, element) {
            element.bind('change', function (changeEvent) {
                scope.fileInput = $('.filestyle');
                scope.maxSize = 256000;
                var ext = changeEvent.target.files[0].name.split('.').pop().toLowerCase();
                var fileSize = scope.fileInput.get(0).files[0].size; // in bytes 
                var allow = true;
                var _URL = window.URL || window.webkitURL;
                var image;

                image = new Image();
                image.onload = function () {

                    if (fileSize > scope.maxSize) {
                        $timeout(function () {
                            message.showClientSideErrors('Please select image with appropriate size (Maximum 250 KB).');
                        });
                        element.val(null);
                    }

                    else if ($.inArray(ext, ['png', 'jpg', 'jpeg']) === -1) {
                        allow = false;
                        $timeout(function () {
                            message.showClientSideErrors('Please select image with valid extension.');
                        });
                        element.val(null);
                    }

                    else {
                        var reader = new FileReader();
                        reader.onload = function (loadEvent) {
                            scope.$apply(function () {
                                scope.fileReadUserImage = loadEvent.target.result;
                            });
                        };
                        reader.readAsDataURL(changeEvent.target.files[0]);
                        message.clearMessage();
                    }
                };
                image.src = _URL.createObjectURL(this.files[0]);
            });
        }
    }
})();



/*global $ */
(function () {

    'use strict';

    angular
        .module('app.blocks')
        .directive('fileReadExcel', fileReadExcel);

    fileReadExcel.$inject = ['$timeout', 'message'];

    function fileReadExcel($timeout, message) {
       
        var directive = {
            link: link,
            restrict: 'EA',
            scope: {
                fileReadExcel: '=',
            },
        };
        return directive;

        function link(scope, element) {
            element.bind('change', function (changeEvent1) {
                message.clearMessage();
                var _URL1 = window.URL || window.webkitURL;
                var image1 = new Image();
                var reader1 = new FileReader();
                reader1.onload = function (loadEvent) {
                    scope.$apply(function () {
                        scope.fileReadExcel = loadEvent.target.result;
                    });
                };
                reader1.readAsDataURL(changeEvent1.target.files[0]);
                image1.src = _URL1.createObjectURL(this.files[0]);
                void 0;
                if (scope.$parent.fo.lv.IsCalled === true) {
                    $timeout(function () {
                        scope.$parent.fo.uploadExcel();
                    });
                }
            });
        }
    }

})();




(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('fixHeight', fixHeight);

    fixHeight.$inject = ['helper', '$timeout'];

    function fixHeight(helper, $timeout) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link() {
            $timeout(function () {
                var getHeight = $('.page-head-container').innerHeight();
                if (getHeight !== undefined) {
                    helper.setHeight(getHeight + 65 + 'px');
                }
                else {
                    helper.setHeight(55 + 'px');
                }

            }, 100);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('fixFormHeight', fixFormHeight);

    fixFormHeight.$inject = ['$window'];

    function fixFormHeight($window) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {
            scope.$watch(function () {

                var getHeight = $('.page-head-container').innerHeight();
                if (getHeight !== undefined) {
                    if ($window.innerWidth > 992) {
                        scope.fo.lv.topHeightPadding = getHeight + 35 + 'px';
                        scope.fo.lv.topHeightPaddingOne = getHeight + 12 + 'px';
                    } else {
                        scope.fo.lv.topHeightPadding = getHeight + 20 + 'px';
                        scope.fo.lv.topHeightPaddingOne = getHeight + 12 + 'px';
                    }
                }
              
            }, true);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('fixFormHeightShell', fixFormHeightShell);

    fixFormHeightShell.$inject = ['$window', '$timeout'];

    function fixFormHeightShell($window, $timeout) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {
            $timeout(function () {
                var getHeight = $('.page-head-container').innerHeight();
                if (getHeight !== undefined) {
                    if ($window.innerWidth > 992) {
                        scope.shl.lv.topHeightPaddingOne = getHeight + 25 + 'px';
                    } else {
                        scope.shl.lv.topHeightPaddingOne = getHeight + 30 + 'px';
                    }
                }
            }, 100);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('fixFormHeightOne', fixFormHeightOne);

    fixFormHeightOne.$inject = ['$window', '$timeout'];

    function fixFormHeightOne($window, $timeout) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {

            $timeout(function () {
                var getHeight = $('.page-head-container').innerHeight();
                var txt = $('.row-height').innerHeight();
                if ($window.innerWidth > 992) {
                    if (getHeight !== undefined) {
                        scope.fo.lv.topHeightPaddingOne = getHeight + txt + 20 + 'px';
                    }
                }
                else {
                    if (getHeight !== undefined) {
                        scope.fo.lv.topHeightPaddingOne = getHeight + 20 + 'px';
                    }
                }
            }, 100);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('setFooter', setFooter);

    setFooter.$inject = ['$window', '$timeout'];

    function setFooter($window, $timeout) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {

            scope.$watch(function () {
                $timeout(function () {
                    var getHeight = $('.page-head-container').innerHeight();
                    var txt = $('.row-height').innerHeight();
                    if (txt !== undefined) {
                        if (getHeight !== undefined) {
                            scope.fo.lv.topHeightPaddingTemp = getHeight + txt + 20;
                        }
                    }
                    else {
                        scope.fo.lv.topHeightPaddingTemp = getHeight + 15;
                    }

                    var windowSize = $window.innerHeight;
                    var sectionHeight = $('.section-height').innerHeight();
                    var sectionTotalHeight = sectionHeight + scope.fo.lv.topHeightPaddingTemp;

                    if (windowSize > sectionTotalHeight) {
                        scope.fo.lv.setFooterPaddingRecord = (windowSize) - (sectionTotalHeight + 200) + 'px';
                        scope.fo.lv.setFooterPaddingNoRecord = (windowSize) - (sectionTotalHeight + 232) + 'px';
                        scope.fo.lv.setFooterPaddingForm = (windowSize) - (sectionTotalHeight + 172) + 'px';
                        scope.fo.lv.setFooterPaddingFormSuggested = (windowSize) - (sectionTotalHeight + 147) + 'px';
                    }
                    else {
                        scope.fo.lv.setFooterPaddingRecord = 0 + 'px';
                        scope.fo.lv.setFooterPaddingNoRecord = 0 + 'px';
                        scope.fo.lv.setFooterPaddingFormSuggested = 0 + 'px';
                        scope.fo.lv.setFooterPaddingForm = 0 + 'px';
                    }
                  
                }, 100);
            }, true);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('setFooterShell', setFooterShell);

    setFooterShell.$inject = ['$window', '$timeout', 'bowser'];

    function setFooterShell($window, $timeout, bowser) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {

            scope.$watch(function () {
                $timeout(function () {
                    var getHeight = $('.page-head-container').innerHeight();
                    var txt = $('.row-height').innerHeight();
                    if (txt !== undefined) {
                        if (getHeight !== undefined) {
                            scope.shl.lv.topHeightPaddingTemp = getHeight + txt + 20;
                        }
                    }
                    else {
                        scope.shl.lv.topHeightPaddingTemp = getHeight + 15;
                    }

                    var windowSize = $window.innerHeight;
                    var sectionHeight = $('.section-height').innerHeight();
                    var sectionTotalHeight = sectionHeight + scope.shl.lv.topHeightPaddingTemp;

                    if (windowSize > sectionTotalHeight) {

                        if (bowser.chrome === true) {
                            scope.shl.lv.setFooterPaddingForm = (windowSize) - (sectionTotalHeight + 152) + 'px';

                        }
                        else {
                            scope.shl.lv.setFooterPaddingForm = (windowSize) - (sectionTotalHeight + 150) + 'px';

                        }

                    }
                    else {
                        scope.shl.lv.setFooterPaddingForm = 0 + 'px';

                    }

                    if (windowSize > sectionHeight) {

                        if (bowser.chrome === true) {

                            scope.shl.lv.setFooterPaddingFormHome = (windowSize) - (sectionHeight + 200) + 'px';
                        }
                        else {

                            scope.shl.lv.setFooterPaddingFormHome = (windowSize) - (sectionHeight + 198) + 'px';
                        }

                    }
                    else {

                        scope.shl.lv.setFooterPaddingFormHome = 0 + 'px';
                    }
                }, 100);

            }, true);

        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.blocks')
        .directive('agreementContainerHeight', agreementContainerHeight);

    agreementContainerHeight.$inject = ['$window', '$timeout'];

    function agreementContainerHeight($window, $timeout) {

        var directive = {
            link: link,
            restrict: 'EA'
        };

        return directive;

        function link(scope) {


            $timeout(function () {
                var getHeight = $('.page-head-container').innerHeight();
                var windowSize = $window.innerHeight;
                var agreementContainerHeight = windowSize - (getHeight + 249);

                scope.shl.lv.setAgreementContainerHeight = agreementContainerHeight + 'px';
            }, 100);

        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('msgHideShow', msgHideShow);

    msgHideShow.$inject = [];

    function msgHideShow() {

        var directive = {
            restrict: 'EACM',
            link: link
        };

        return directive;

        function link(scope, element) {
            element.find('.mes-open').removeClass('msgToggleBtn');
            $('.mes-close').bind('click', function () {
                $('.mes-open').addClass('msgToggleBtn');
                $('.msg-box').find('div.successMsg').addClass('ng-hide');
            });
            $('.mes-open').bind('click', function () {
                $('.mes-open').removeClass('msgToggleBtn');
                $('.msg-box').find('div.successMsg').removeClass('ng-hide');
            });
            $('.container-page').bind('click', function () {
                $('.mes-open').addClass('msgToggleBtn');
                $('.msg-box').find('div.successMsg').addClass('ng-hide');
            });
            $('.page-with-dashboard').bind('click', function () {
                $('.mes-open').addClass('msgToggleBtn');
                $('.msg-box').find('div.successMsg').addClass('ng-hide');
            });
            $('.pageButton a').bind('click', function () {
                $('.mes-open').removeClass('msgToggleBtn');
                $('.msg-box').find('div.successMsg').removeClass('ng-hide');
            });
        }
    }
})();

(function () {
    'use strict';
    angular
         .module('app.blocks').directive('paginate', function () {
             return {
                 restrict: 'E',
                 templateUrl: '/app/other/paginate.html',
                 replace: false
             };
         });
})();

(function () {
    'use strict';

    angular
         .module('app.blocks').directive('paginateTransaction', function () {
             return {
                 restrict: 'E',
                 templateUrl: '/app/other/paginateTransaction.html',
                 replace: false
             };
         });
})();

/*global $ */
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('positiveDecimalNumber', positiveDecimalNumber);

    //positiveDecimalNumber.$inject = [];

    function positiveDecimalNumber() {
        // Usage:
        //     <positiveDecimalNumber></positiveDecimalNumber>
        // Creates:
        // 
        var directive = {
            link: link,
            restrict: 'EA',
            require: '^ngModel',
        };
        return directive;

        function link(scope, element, attrs, ngModel) {

            element.on('keydown', function (e) {

                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    return;
                }

                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            if (!ngModel) {
                return;
            }


            function inputValue(val) {
                if (val) {

                    var old = ngModel.$modelValue;
                    var checkRegex = true;
                    var count = 0;

                //    number = val.split('');

                    for (var i = 0; i < val.length; i++) {
                        if (val[i] === '.') {
                            count++;
                        }
                    }

                    if (count > 1 || count === 0) {
                        checkRegex = true;
                    }
                    else {
                        if (val[val.length - 1] === '.') {
                            checkRegex = false;
                        }
                        else {
                            checkRegex = true;
                        }
                    }

                    if (checkRegex === true) {
                        var numReg = (new RegExp(/^([0-9]{0,13}([.][0-9]{1,2})?)$/));
                        if (numReg.test(val)) {
                            return val;
                        }
                        else {
                            ngModel.$setViewValue(old);
                            ngModel.$render();

                            return old;
                        }
                    }
                    else {
                        return val;
                    }
                }
                return null;
            }

            ngModel.$parsers.push(inputValue);

        }
    }

})();
/*global $ */
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('positiveNumber', positiveNumber);
     
    function positiveNumber() {
       
        var directive = {
            link: link,
            restrict: 'EA',
            require: '^ngModel',
        };
        return directive;

        function link(scope, element, attrs, ngModel) {
            element.on('keydown', function (e) {

               
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+V
                    (e.keyCode === 86 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode === 88 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode === 67 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
              
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            if (!ngModel) {
                return;
            }

            function inputValue(val) {
                if (val) {
                    var f = parseFloat(val);

                    if (attrs.min !== undefined) {
                        var minValue = scope.$eval(attrs.min);

                        if (f < minValue) {
                            ngModel.$setValidity('min', false);
                        }
                        else {
                            ngModel.$setValidity('min', true);
                        }
                    }

                    if (attrs.max !== undefined) {
                        var maxValue = scope.$eval(attrs.max);

                        if (f > maxValue) {
                            ngModel.$setValidity('max', false);
                        }
                        else {
                            ngModel.$setValidity('max', true);
                        }
                    }

                    var old = ngModel.$modelValue;

                    if (new RegExp(/^[0-9]*$/).test(val)) {
                        return val;
                    }
                    else {
                        ngModel.$setViewValue(old);
                        ngModel.$render();
                        return old;
                    }
                }
                return null;
            }

            ngModel.$parsers.push(inputValue);
        }
    }

})();
/*global $ */
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('positiveQuantity', positiveQuantity);

    //positiveQuantity.$inject = [];

    function positiveQuantity() {
        // Usage:
        //     <positiveQuantity></positiveQuantity>
        // Creates:
        // 
        var directive = {
            link: link,
            restrict: 'EA',
            require: '^ngModel',
        };
        return directive;

        function link(scope, element, attrs, ngModel) {

            element.on('keydown', function (e) {

                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    return;
                }

                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            if (!ngModel) {
                return;
            }


            function inputValue(val) {
                if (val) {

                    var old = ngModel.$modelValue;
                    var checkRegex = true;
                    //var number;
                    var count = 0;

                //    number = val.split('');

                    for (var i = 0; i < val.length; i++) {
                        if (val[i] === '.') {
                            count++;
                        }
                    }

                    if (count > 1 || count === 0) {
                        checkRegex = true;
                    }
                    else {
                        if (val[val.length - 1] === '.') {
                            checkRegex = false;
                        }
                        else {
                            checkRegex = true;
                        }
                    }

                    if (checkRegex === true) {
                        var numReg = (new RegExp(/^([0-9]{0,9}([.][0-9]{1,3})?)$/));
                        if (numReg.test(val)) {
                            return val;
                        }
                        else {
                            ngModel.$setViewValue(old);
                            ngModel.$render();

                            return old;
                        }
                    }
                    else {
                        return val;
                    }
                }
                return 0;
            }

            ngModel.$parsers.push(inputValue);

        }
    }

})();
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('scrollOnValidation', scrollOnValidation);
 
    function scrollOnValidation() {
        
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element) {

            scope.$on('scrollToError', function () {
                var firstInvalid = element[0].querySelector('.ng-invalid');

                if (firstInvalid) {
                    firstInvalid.focus();
                }
            });
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('app.blocks')
        .directive('typeaheadViewValue', typeaheadViewValue);

    typeaheadViewValue.$inject = ['$parse'];

    function typeaheadViewValue($parse) {

        var directive = {
            link: link,
            restrict: 'A',
            require: 'ngModel',
        };
        return directive;

        function link(scope, element, attrs, ngModel) {
            element.bind('blur', function () {
                if (scope.ngModel === undefined || scope.ngModel === null || scope.ngModel === '') {

                    if (ngModel.$modelValue === undefined) {
                        ngModel.$viewValue = null;
                        if (attrs.typeaheadViewValue !== '' && attrs.typeaheadViewValue !== undefined && attrs.typeaheadViewValue !== null) {
                            $parse(attrs.typeaheadViewValue).assign(scope, null);
                            scope.$apply();
                        }
                    }
                    ngModel.$render();
                }
            });
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('app.availabilityTime')
        .factory('AvailabilityTimeFactory', AvailabilityTimeFactory);

    AvailabilityTimeFactory.$inject = ['$http', '$q', 'appUrl'];

    function AvailabilityTimeFactory($http, $q, appUrl) {
        var service = {
            getList: getList,
            submit: submit
        };

        return service;
   
        function getList(date, IsAll) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/DesignerTimeSlot/' + date + '/' + IsAll + '/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Designer/DesignerTimeSlot', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.availabilityTime')
        .controller('AvailabilityTime', AvailabilityTime);

    AvailabilityTime.$inject = ['$location', '$state', 'stackView', 'helper', '$scope', 'message', 'AvailabilityTimeFactory'];

    function AvailabilityTime($location, $state, stackView, helper, $scope, message, AvailabilityTimeFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Availability Time';
        fo.lv.setFooterPaddingRecord = null;
        fo.lv.currentDate = new Date();
        fo.vm.Date = null;
        fo.lv.openDays = 'halfday';
        fo.lv.showTimeSlot = false;
        fo.lv.isFormInvalid = false;
        function initilizeController() {
            helper.setIsSubmitted(false);
            var obj = stackView.getLastViewDetail();
            void 0;
            if (obj.formName === 'AvailabilityTime') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
            }

            else {
                fo.lv.startDateOptions = {
                    startingDay: 1,
                    showWeeks: false,
                    initDate: null,
                    minDate: new Date()
                };
            }
        }

        initilizeController();

        fo.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            if (fo.openedStart === true) {
                fo.openedStart = false;
            }
            else if (opened === 'openedStart') {
                fo.openedEnd = false;
                fo.openedStart = true;
            }
            if (fo.openedEnd === true) {
                fo.openedEnd = false;
            }
            else if (opened === 'openedEnd') {
                fo.openedStart = false;
                fo.openedEnd = true;
            }
        };

        fo.setTime = function () {
            fo.lv.showTimeSlot = false;
        };

        fo.search = function () {
            if ($scope.AvailabilityTimeFrom.$invalid) {
                fo.lv.isFormInvalid = true;
                return;
            }
            var date = angular.copy(helper.formatDate(fo.vm.Date));

            AvailabilityTimeFactory.getList(date, false).then(function (data) {
                void 0;
                fo.vm = data;
                fo.lv.openDays = 'halfday';
                fo.lv.showTimeSlot = true;
                isAll();
            });

        };

        fo.isSubmitted = function () {
            return helper.getIsSubmitted();
        };

        fo.save = function () {
            if ($scope.AvailabilityTimeFrom.$invalid) {
                fo.lv.isFormInvalid = true;
                return;
            }

            var count = 0;
            for (var s = 0; s < fo.vm.TimeSlotList.length; s++) {
                if (fo.vm.TimeSlotList[s].IsChecked === true) {
                    count++;
                }
            }
            if (count === 0) {
                message.showClientSideErrors('Please select atleast one slot before save.');
                return;
            }
            void 0;
            helper.setIsSubmitted(true);
            AvailabilityTimeFactory.submit(fo.vm).then(function (data) {
                void 0;
                message.showServerSideMessage(data, true);
                fo.lv.showTimeSlot = false;
                fo.vm.Date = null;
                helper.setIsSubmitted(false);
            });
        };

        fo.slotChanged = function (value) {
            var date = angular.copy(helper.formatDate(fo.vm.Date));
            if (value === 'fullday') {
                AvailabilityTimeFactory.getList(date, true).then(function (data) {
                    fo.vm = data;
                    isAll();
                });
            }
            if (value === 'halfday') {
                AvailabilityTimeFactory.getList(date, false).then(function (data) {
                    fo.vm = data;
                    isAll();
                });
            }

        };

        fo.checkboxClicked = function (type) {
            var count = 0;
            if (type === 'one') {
                if (fo.lv.IsChecked === true) {
                    fo.lv.IsChecked = false;
                }
                for (var s = 0; s < fo.vm.TimeSlotList.length; s++) {
                    if (fo.vm.TimeSlotList[s].IsChecked === true) {
                        fo.vm.TimeSlotList[s].TimeSlotStatus = 1;
                        count++;
                    }
                }
                if (count === fo.vm.TimeSlotList.length) {
                    fo.lv.IsChecked = true;
                }
            }
            if (type === 'all') {
                if (fo.lv.IsChecked === true) {
                    for (var p = 0; p < fo.vm.TimeSlotList.length; p++) {
                        fo.vm.TimeSlotList[p].IsChecked = true;
                        fo.vm.TimeSlotList[p].TimeSlotStatus = 1;
                    }
                }
                if (fo.lv.IsChecked === false) {
                    for (var q = 0; q < fo.vm.TimeSlotList.length; q++) {
                        fo.vm.TimeSlotList[q].IsChecked = false;
                        fo.vm.TimeSlotList[q].TimeSlotStatus = 0;
                    }
                }
            }
        };

        function isAll() {
            fo.lv.IsChecked = false;
            var count = 0;
            for (var j = 0; j < fo.vm.TimeSlotList.length; j++) {
                if (fo.vm.TimeSlotList[j].TimeSlotStatus === 0) {
                    fo.vm.TimeSlotList[j].IsChecked = false;
                }

                else {
                    count++;
                    fo.vm.TimeSlotList[j].IsChecked = true;
                }
            }
            if (count === fo.vm.TimeSlotList.length) {
                fo.lv.IsChecked = true;
            }
        }

    }
})();

(function () {
    'use strict';

    angular.module('app.availabilityTime', [
        // Angular modules 
     
        // Custom modules 

        // 3rd Party Modules
        
    ]);
})();
angular.module('app.availabilityTime').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $stateProvider
    .state('AvailabilityTime', {
        url: '/availabilityTime',
        templateUrl: '/app/designer/availabilityTime/Availability.html',
        //resolve: {
        //    InitialDataOfApprovalList: ['approvalListFactory', '$q',
        //        function (approvalListFactory, $q) {

        //            var promises = {
        //                vm: approvalListFactory.getList(),
        //                sl: approvalListFactory.getStatusList()
        //            };

        //            return $q.all(promises).then(function (values) {
        //                var initData = {};
        //                initData.viewModel = values.vm;
        //                initData.statusList = values.sl;
        //                return initData;
        //            });
        //        }]
        //},
        controller: 'AvailabilityTime',
        controllerAs: 'fo'
    });
       //.state('AppointmentRequest', {
       //    url: '/appointmentRequest',
       //    templateUrl: '/app/designer/customerAppointments/create.html',
       //    resolve: {
       //        InitialDataOfAppointmentCreate: ['AppointmentCreateFactory', '$q', 'helper',
       //            function (AppointmentCreateFactory, $q, helper) {
       //                var date = helper.formatDate(new Date());
       //                var promises = {
       //                    vm: AppointmentCreateFactory.getDefault(),
       //                    sl: AppointmentCreateFactory.getSlotList(date)
       //                };

       //                return $q.all(promises).then(function (values) {
       //                    var initData = {};
       //                    initData.viewModel = values.vm;
       //                    initData.slotList = values.sl;
       //                    return initData;
       //                });
       //            }]
       //    },
       //    controller: 'CreateAppointmentRequest',
       //    controllerAs: 'fo'
       //});


}]);
(function () {
    'use strict';

    angular.module('app.appointment', [
        // Angular modules 
     
        // Custom modules 

        // 3rd Party Modules
        
    ]);
})();
angular.module('app.appointment').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $stateProvider
    .state('Appointments', {
        url: '/appointments',
        templateUrl: '/app/designer/customerAppointments/list.html',
        resolve: {
            InitialDataOfAppointmentList: ['AppointmentListFactory', '$q',
                function (AppointmentListFactory, $q) {

                    var promises = {
                        vm: AppointmentListFactory.getList(),
                        sl: AppointmentListFactory.getStatusList(),
                        dl: AppointmentListFactory.getDateList()
                    };

                    return $q.all(promises).then(function (values) {
                        var initData = {};
                        initData.viewModel = values.vm;
                        initData.statusList = values.sl;
                        initData.dateList = values.dl;
                        return initData;
                    });
                }]
        },
        controller: 'AppointmentList',
        controllerAs: 'fo'
    })

    .state('AppointmentDetail', {
        url: '/appointmentDetail/:OrderNumber/:OrderDate',
        templateUrl: '/app/designer/customerAppointments/detail.html',
        resolve: {
            InitialDataOfAppointmentDetail: ['AppointmentDetailFactory', '$q', '$stateParams',
                function (AppointmentDetailFactory, $q, $stateParams) {
                    var promises = {
                        vm: AppointmentDetailFactory.getDefaultViewModel($stateParams.OrderNumber, $stateParams.OrderDate),
                    };

                    return $q.all(promises).then(function (values) {
                        var initData = {};
                        initData.viewModel = values.vm;
                        return initData;
                    });
                }]
        },
        controller: 'AppointmentDetail',
        controllerAs: 'fo'
    })


    .state('InitiateCall', {
        url: '/appointmentDetail/InitiateCall',
        templateUrl: '/app/designer/customerAppointments/initiateCall.html',
        //resolve: {
        //    InitialDataOfApprovalList: ['AppointmentListFactory', '$q',
        //        function (AppointmentListFactory, $q) {

        //            var promises = {
        //                vm: AppointmentListFactory.getList(),
        //                sl: AppointmentListFactory.getStatusList()
        //            };

        //            return $q.all(promises).then(function (values) {
        //                var initData = {};
        //                initData.viewModel = values.vm;
        //                initData.statusList = values.sl;
        //                return initData;
        //            });
        //        }]
        //},
        controller: 'InitiateCall',
        controllerAs: 'fo'
    })

    .state('CompleteCall', {
        url: '/appointmentDetail/CompleteCall',
        templateUrl: '/app/designer/customerAppointments/completeCall.html',
        //resolve: {
        //    InitialDataOfApprovalList: ['AppointmentListFactory', '$q',
        //        function (AppointmentListFactory, $q) {

        //            var promises = {
        //                vm: AppointmentListFactory.getList(),
        //                sl: AppointmentListFactory.getStatusList()
        //            };

        //            return $q.all(promises).then(function (values) {
        //                var initData = {};
        //                initData.viewModel = values.vm;
        //                initData.statusList = values.sl;
        //                return initData;
        //            });
        //        }]
        //},
        controller: 'CompleteCall',
        controllerAs: 'fo'
    });
}]);
(function () {
    'use strict';

    angular
        .module('app.appointment')
        .factory('AppointmentCreateFactory', AppointmentCreateFactory);

    AppointmentCreateFactory.$inject = ['$http', '$q', 'appUrl'];

    function AppointmentCreateFactory($http, $q, appUrl) {
        var service = {
            getDefault: getDefault,
            getSlotList: getSlotList,
            getAppointmentRequestCount: getAppointmentRequestCount,
            submit: submit
        };

        return service;

        function getDefault() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/AppointmentRequest').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getSlotList(date) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + date + '/AppointmentSlotList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getAppointmentRequestCount() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/AppointmentRequestCount').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Designer/Appointment', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
//(function () {
//    'use strict';

//    angular
//        .module('app.availabilityTime')
//        .controller('CreateAppointmentRequest', CreateAppointmentRequest);

//    CreateAppointmentRequest.$inject = ['$location', '$state', 'stackView', '$scope', 'message', 'helper', '$ngBootbox', '$timeout', 'AppointmentCreateFactory', 'InitialDataOfAppointmentCreate'];

//    function CreateAppointmentRequest($location, $state, stackView, $scope, message, helper, $ngBootbox, $timeout, AppointmentCreateFactory, InitialDataOfAppointmentCreate) {
//        /* jshint validthis:true */
//        var fo = this;
//        shl.vm = {};
//        shl.lv = {};
//        shl.lv.title = 'Add Request for Appointment';
//        shl.lv.setFooterPaddingRecord = null;

//        shl.lv.isFormInvalid = false;

//        function initilizeController() {
//            helper.setIsSubmitted(false);
//            shl.vm = InitialDataOfAppointmentCreate.viewModel;

//            shl.lv.fulldayList = InitialDataOfAppointmentCreate.slotList;
//            shl.vm.AppointmentDate = shl.vm.AppointmentDate === '0001-01-01T00:00:00' ? new Date() : shl.vm.AppointmentDate;
//            shl.vm.TimeSlotID = null;
//            shl.lv.startDateOptions = {
//                startingDay: 1,
//                showWeeks: false,
//                initDate: null,
//                minDate: new Date(shl.vm.AppointmentDate)
//            };
//        }

//        initilizeController();

//        fo.isSubmitted = function () {
//            return helper.getIsSubmitted();
//        };

//        fo.open = function ($event, opened) {
//            $event.preventDefault();
//            $event.stopPropagation();
//            if (fo.openedStart === true) {
//                fo.openedStart = false;
//            }
//            else if (opened === 'openedStart') {

//                fo.openedEnd = false;
//                fo.openedStart = true;
//            }
//            if (fo.openedEnd === true) {
//                fo.openedEnd = false;
//            }
//            else if (opened === 'openedEnd') {
//                fo.openedStart = false;
//                fo.openedEnd = true;
//            }
//        };

//        //fo.Close = function () {
//        //    var obj = stackView.getLastViewDetail();
//        //    var options = {
//        //        message: 'Do you want to close the form?',
//        //        buttons: {
//        //            success: {
//        //                label: ' ',
//        //                className: 'fa fa-check-page',
//        //                callback: function () {
//        //                    $timeout(function () {
//        //                    }, 100);
//        //                    if (obj.formName !== 'Home') {
//        //                        stackView.closeView();
//        //                        return;
//        //                    }
//        //                    else {
//        //                        stackView.openView('AvailabilityTime');
//        //                    }
//        //                }
//        //            }
//        //        }
//        //    };
//        //    if ($scope.AppointmentRequestForm.$dirty) {
//        //        $ngBootbox.customDialog(options);
//        //    }
//        //    else {
//        //        if (obj.formName !== 'Home') {
//        //            stackView.closeView();
//        //            return;
//        //        }
//        //        else {
//        //            stackView.openView('AvailabilityTime');
//        //        }
//        //    }
//        //};

//        fo.save = function () {
//            if ($scope.AppointmentRequestForm.$invalid) {
//                shl.lv.isFormInvalid = true;
//                helper.scrollToError();
//                return;
//            }

//            for (var i = 0; i < shl.lv.fulldayList.length; i++) {
//                if (shl.lv.fulldayList[i].Value === shl.vm.TimeSlotID) {
//                    shl.vm.TimeSlot = shl.lv.fulldayList[i].Text;
//                    shl.vm.EndTime = shl.lv.fulldayList[i].EndTime;
//                    shl.vm.StartTime = shl.lv.fulldayList[i].StartTime;
//                }
//            }

//            console.log('view model on save', shl.vm);
//            helper.setIsSubmitted(true);
//            AppointmentCreateFactory.submit(shl.vm).then(function (data) {
//                console.log('data after save', data);
//                message.showServerSideMessage(data, true);
//                helper.setIsSubmitted(false);
//                $state.go('/');
//            });
//        };

//        fo.setTime = function () {
//            shl.vm.AppointmentDate = helper.formatDate(shl.vm.AppointmentDate);
//            AppointmentCreateFactory.getSlotList(shl.vm.AppointmentDate).then(function (data) {
//                if (data.length === 0) {
//                    message.showClientSideErrors('You can not book appointment as you have not saved any available slot for this day.');
//                }
//                shl.lv.fulldayList = data;
//            });
//        };
//    }
//})();

(function () {
    'use strict';

    angular
        .module('app.appointment')
        .factory('AppointmentDetailFactory', AppointmentDetailFactory);

    AppointmentDetailFactory.$inject = ['$http', '$q', 'appUrl'];

    function AppointmentDetailFactory($http, $q, appUrl) {
        var service = {
            getDefaultViewModel: getDefaultViewModel,
            uploadImage: uploadImage,
            downloadOtherFile: downloadOtherFile,
            downloadDesignImage: downloadDesignImage,
            downloadVectorFile: downloadVectorFile,
            downloadFile: downloadFile,
            updateStatus: updateStatus,
            submit: submit
        };

        return service;

        function getDefaultViewModel(Number, Date) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + Number + '/' + Date).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function uploadImage(ImageModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Designer/Appointment/UploadUserFile', ImageModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadOtherFile(Number) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + Number + '/DownloadDesignerAppointmentFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadDesignImage(Number) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + Number + '/DownloadDesignImage').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadVectorFile(Number) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + Number + '/DownloadVectorFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;

        }

        function downloadFile(Number) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/' + Number + '/DownloadFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function updateStatus(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Designer/Appointment/UpdateAppointmentStatus', viewModel).then(function (response) {
                def.resolve(response.data);
            })
           .catch(function fail(error) {
               void 0;
               def.reject(error);
           });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Designer/Appointment', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.appointment')
        .controller('AppointmentDetail', AppointmentDetail);

    AppointmentDetail.$inject = ['$location', '$state', 'stackView', '$compile', '$scope', '$ngBootbox', '$timeout', 'message', 'helper', 'AppointmentDetailFactory', 'InitialDataOfAppointmentDetail'];

    function AppointmentDetail($location, $state, stackView, $compile, $scope, $ngBootbox, $timeout, message, helper, AppointmentDetailFactory, InitialDataOfAppointmentDetail) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Appointments Details';
        fo.lv.setFooterPaddingRecord = null;
        fo.lv.uploadImage = ' ';
        fo.lv.uploadVector = ' ';
        fo.lv.uploadOtherImage = ' ';

        function initilizeController() {

            fo.vm = InitialDataOfAppointmentDetail.viewModel;
            void 0;
            var a = new Date();
            fo.lv.startTime = a.getFullYear().toString() + '-' +
                ((a.getMonth() + 1).toString().length > 1 ? (a.getMonth() + 1).toString() : ('0' + (a.getMonth() + 1).toString())) +
            '-' + a.getDate().toString() + 'T' +
            (((Math.floor(fo.vm.StartTime / 60)).toString()).length === 1 ? ('0' + (Math.floor(fo.vm.StartTime / 60)).toString()) : (Math.floor(fo.vm.StartTime / 60)).toString()) +
            ':' + (((fo.vm.StartTime % 60).toString()).length === 1 ? ('0' + (fo.vm.StartTime % 60).toString()) : (fo.vm.StartTime % 60).toString());

            fo.lv.endTime = a.getFullYear().toString() + '-' +
               ((a.getMonth() + 1).toString().length > 1 ? (a.getMonth() + 1).toString() : ('0' + (a.getMonth() + 1).toString())) +
           '-' + a.getDate().toString() + 'T' +
           (((Math.floor(fo.vm.EndTime / 60)).toString()).length === 1 ? ('0' + (Math.floor(fo.vm.EndTime / 60)).toString()) : (Math.floor(fo.vm.EndTime / 60)).toString()) +
           ':' + (((fo.vm.EndTime % 60).toString()).length === 1 ? ('0' + (fo.vm.EndTime % 60).toString()) : (fo.vm.EndTime % 60).toString());

            fo.lv.EndTime = helper.formatDateTime(fo.lv.endTime);
            fo.lv.StartTime = helper.formatDateTime(fo.lv.startTime);
            //if (fo.vm.VectorImageBuffer !== null && fo.vm.VectorImageBuffer !== ' ') {
            //    fo.lv.uploadVector = 'data:image/png;base64,' + fo.vm.VectorImageBuffer.toString();
            //}

            //if (fo.vm.DesignImageBuffer !== null && fo.vm.DesignImageBuffer !== ' ') {
            //    fo.lv.uploadImage = 'data:image/png;base64,' + fo.vm.DesignImageBuffer.toString();
            //}

            fo.lv.RequestDateTime = angular.copy(fo.vm.RequestDateTime.split('-'));
            fo.lv.AppointmentDateTime = angular.copy(fo.vm.AppointmentDateTime.split('-'));

            fo.lv.DesignerAppointmentFileList = angular.copy(fo.vm.DesignerAppointmentFileList);
            fo.lv.DesignImageList = angular.copy(fo.vm.DesignImageList);
            fo.lv.FileList = angular.copy(fo.vm.FileList);

            fo.vm.DesignerAppointmentFileList = null;
            fo.vm.DesignImageList = null;
            fo.vm.FileList = null;
            void 0;
        }

        initilizeController();

        fo.clear = function (value) {
            if (value === 'design') {
                fo.lv.isImage = 0;
                fo.lv.uploadImage = ' ';
            }
            if (value === 'vector') {
                fo.lv.isImage = 1;
                fo.lv.uploadVector = ' ';
            }
            if (value === 'other') {
                fo.lv.isImage = 2;
                fo.lv.uploadOtherImage = ' ';
            }
        };

        fo.uploadOtherFile = function (ext) {
            fo.lv.imageModel = {};
            fo.lv.imageModel.FileBuffer = null;
            fo.lv.imageModel.AppointmentNumber = fo.vm.AppointmentNumber;
            fo.lv.imageModel.FileExtension = ext;
            if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                if (image.test(fo.lv.uploadImage)) {
                    if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                        fo.lv.imageModel.FileBuffer = fo.lv.uploadImage;
                        fo.lv.imageModel.FileBuffer = fo.lv.imageModel.FileBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                        void 0;
                        AppointmentDetailFactory.uploadImage(fo.lv.imageModel).then(function (data) {
                            fo.vm.DesignerAppointmentFileList = data.ReturnedData;
                            void 0;
                        });
                    }
                }
            }
        };

        fo.InitiateCall = function () {
            var templateString = '<div><div><label class="glyphicon-asterisk">Call start time</label>' +
               '<div uib-timepicker ng-model="fo.lv.StartTime" show-spinners=false hour-step="1" minute-step="1" show-meridian="false" datetimepicker-neutral-timezone>' +
            '</div></div></div>';
            var element = $compile(templateString)($scope);

            var options = {
                title: 'Initiate call',
                value: fo.lv.selectValue,
                message: element,
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            fo.vm.CallStartTime = fo.lv.StartTime;
                            fo.vm.AppointmentStatus = 'Initiated';
                            void 0;
                            AppointmentDetailFactory.updateStatus(fo.vm).then(function (data) {
                                void 0;
                                message.showServerSideMessage(data, true);
                            });
                        }
                    }
                },
                onEscape: function () {
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.CompleteCall = function () {
            var templateString = '<div><div><label class="glyphicon-asterisk">Call end time</label>' +
                '<div uib-timepicker ng-model="fo.lv.EndTime" show-spinners=false hour-step="1" minute-step="1" show-meridian="false" datetimepicker-neutral-timezone>' +
                '</div></div></div>';
            var element = $compile(templateString)($scope);

            var options = {
                title: 'Complete call',
                value: fo.lv.selectValue,
                message: element,
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            if (new Date(fo.lv.StartTime) > new Date(fo.lv.EndTime)) {
                                fo.lv.EndTime = helper.formatDateTime(fo.lv.endTime);
                                fo.lv.StartTime = helper.formatDateTime(fo.lv.startTime);
                                message.showClientSideErrors('End time can not be less than start time');
                                return;
                            }
                            fo.vm.CallEndTime = fo.lv.EndTime;
                            fo.vm.AppointmentStatus = 'Completed';
                            AppointmentDetailFactory.updateStatus(fo.vm).then(function (data) {
                                void 0;
                                message.showServerSideMessage(data, true);
                            });
                        }
                    }
                },
                onEscape: function () {
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.CancelCall = function () {
            fo.vm.IsCancel = true;
            fo.vm.AppointmentStatus = 'Cancelled';
        };

        fo.download = function (item, type) {
            if (type === 'otherFile') {
                AppointmentDetailFactory.downloadOtherFile(item.FileNumber).then(function (data) {
                    void 0;
                    if (data !== null) {
                        item.image = 'data:image/png;base64,' + data.toString();
                    }
                });
            }

            if (type === 'DesignImage') {
                AppointmentDetailFactory.downloadDesignImage(item.FileNumber).then(function (data) {
                    void 0;
                    if (data !== null) {
                        item.image = 'data:image/png;base64,' + data.toString();
                    }
                });
            }

            if (type === 'VectorFile') {
                AppointmentDetailFactory.downloadVectorFile(item.FileNumber).then(function (data) {
                    void 0;
                    if (data !== null) {
                        item.image = 'data:image/png;base64,' + data.toString();
                    }
                });
            }

            if (type === 'File') {
                AppointmentDetailFactory.downloadFile(item.FileNumber).then(function (data) {
                    void 0;
                    if (data !== null) {
                        item.image = 'data:image/png;base64,' + data.toString();
                    }
                });
            }
        };

        fo.save = function () {
            if ($scope.AppointmentDetailForm.$invalid) {
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }

            if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                if (image.test(fo.lv.uploadImage)) {
                    if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                        fo.vm.DesignImageExtension = fo.lv.uploadImage.split('/')[1].split(';')[0];
                        fo.vm.DesignImageBuffer = fo.lv.uploadImage;
                        fo.vm.DesignImageBuffer = fo.vm.DesignImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                    }
                }
            }

            if (fo.lv.uploadVector !== undefined && fo.lv.uploadVector !== null && angular.equals(' ', fo.lv.uploadVector) !== true) {
                var VectorImage = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                if (VectorImage.test(fo.lv.uploadVector)) {
                    if (fo.lv.uploadVector !== undefined && fo.lv.uploadVector !== null) {
                        fo.vm.VectorImageExtension = fo.lv.uploadVector.split('/')[1].split(';')[0];
                        fo.vm.VectorImageBuffer = fo.lv.uploadVector;
                        fo.vm.VectorImageBuffer = fo.vm.VectorImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                    }
                }
            }

            void 0;
            AppointmentDetailFactory.submit(fo.vm).then(function (data) {
                void 0;
                message.showServerSideMessage(data, true);
                $state.go('Appointments');
            });

        };

        fo.Close = function () { $state.go('Appointments'); };
    }
})();

(function () {
    'use strict';

    angular
        .module('app.appointment')
        .factory('AppointmentListFactory', AppointmentListFactory);

    AppointmentListFactory.$inject = ['$http', '$q', 'appUrl'];

    function AppointmentListFactory($http, $q, appUrl) {
        var service = {
            getList: getList,
            getStatusList: getStatusList,
            getDateList: getDateList,
            submit: submit
        };

        return service;

        function getList() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getStatusList() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/StatusList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getDateList() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/Appointment/DateList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Designer/Appointment/List', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.appointment')
        .controller('AppointmentList', AppointmentList);

    AppointmentList.$inject = ['$location', '$state', 'stackView', 'InitialDataOfAppointmentList', 'AppointmentListFactory'];

    function AppointmentList($location, $state, stackView, InitialDataOfAppointmentList, AppointmentListFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Customer Appointments';
        fo.lv.setFooterPaddingRecord = null;
        fo.lv.dateList = [];
        function initilizeController() {

            var obj = stackView.getLastViewDetail();
            void 0;
            if (obj.formName === 'AppointmentList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
            }

            else {
                fo.lv.dateList = InitialDataOfAppointmentList.dateList;
                fo.lv.statusList = InitialDataOfAppointmentList.statusList;
                fo.vm = InitialDataOfAppointmentList.viewModel;
                fo.vm.SearchList[2].Value = fo.lv.statusList[1].Text;
                fo.lv.AppointmentDate = 1;
            }
        }

        initilizeController();

        fo.OpenDetail = function (Number, Date) {
            stackView.pushViewDetail({
                controller: 'AppointmentList',
                formObject: fo, url: 'AppointmentList',
                formName: 'AppointmentList'
            });
            $state.go('AppointmentDetail', { OrderNumber: Number, OrderDate: Date });
        };

        fo.search = function () {
            for (var s = 0; s < fo.lv.dateList.length; s++) {
                if (fo.lv.dateList[s].SNo === fo.lv.AppointmentDate) {
                    fo.vm.SearchList[0].Value = fo.lv.dateList[s].FromDate;
                    fo.vm.SearchList[1].Value = fo.lv.dateList[s].ToDate;
                }
            }

            AppointmentListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
            });
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

        function submitListOperation() {
            void 0;
            AppointmentListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('app.ordersTracking')
        .factory('OrderDetailFactory', OrderDetailFactory);

    OrderDetailFactory.$inject = ['$http', '$q', 'appUrl'];

    function OrderDetailFactory($http, $q, appUrl) {
        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel(ID) {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/OrderTracking/' + ID + '/GetByID').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Designer/OrderTracking', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.ordersTracking')
        .controller('TrackingDetail', TrackingDetail);

    TrackingDetail.$inject = ['$location', '$state', 'stackView', '$scope', 'message', 'helper', '$ngBootbox', '$timeout', 'InitialDataOfOrderDetail', 'OrderDetailFactory'];

    function TrackingDetail($location, $state, stackView, $scope, message, helper, $ngBootbox, $timeout, InitialDataOfOrderDetail, OrderDetailFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Update Tracking Number';

        initializeController();

        function initializeController() {
            helper.setIsSubmitted(false);
            void 0;
            fo.vm = InitialDataOfOrderDetail.viewModel.ReturnedData;
        }

        fo.isSubmitted = function () {
            return helper.getIsSubmitted();
        };

        fo.save = function () {
            if ($scope.TrackingUpdateForm.$invalid) {
                fo.lv.isFormInvalid = true;
                helper.scrollToError();
                return;
            }
            helper.setIsSubmitted(true);
            void 0;
            OrderDetailFactory.submit(fo.vm).then(function (data) {
                message.showServerSideMessage(data, true);
                void 0;
                $state.go('Tracking');
                helper.setIsSubmitted(false);
            });

        };

        fo.Close = function () {
            var obj = stackView.getLastViewDetail();
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            if (obj.formName !== 'Home') {
                                stackView.closeView();
                                return;
                            }
                            else {
                                stackView.openView('Tracking');
                            }
                        }
                    }
                }
            };

            if ($scope.TrackingUpdateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                if (obj.formName !== 'Home') {
                    stackView.closeView();
                    return;
                }
                else {
                    stackView.openView('Tracking');
                }
            }
        };


    }
})();

(function () {
    'use strict';

    angular
        .module('app.ordersTracking')
        .factory('TrackingListFactory', TrackingListFactory);

    TrackingListFactory.$inject = ['$http', '$q', 'appUrl'];

    function TrackingListFactory($http, $q, appUrl) {
        var service = {
            getList: getList,
            getstatuslist: getstatuslist,
            submit: submit
        };

        return service;

        function getList() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/OrderTracking/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getstatuslist() {
            var def = $q.defer();
            $http.get(appUrl + 'Designer/OrderTracking/GetStatusList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Designer/OrderTracking/List', viewModel).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.ordersTracking')
        .controller('TrackingList', TrackingList);

    TrackingList.$inject = ['$location', '$state', 'stackView', 'initialdataofTrackinglist', 'TrackingListFactory'];

    function TrackingList($location, $state, stackView, initialdataofTrackinglist, TrackingListFactory) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Order Tracking Number';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            void 0;
            if (obj.formName === 'TrackingList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                TrackingListFactory.submit(fo.vm).then(function (data) {
                    fo.vm = data.ReturnedData;
                    makePageNumber();
                });
            }

            else {
                fo.vm = initialdataofTrackinglist.viewmodel;
                fo.lv.statusList = initialdataofTrackinglist.statuslist;
                fo.lv.searchList = angular.copy(fo.vm.SearchList);
                fo.lv.searchList[0].Value = 1;
                fo.lv.searchList[1].Value = false;
            }
        }

        fo.OpenDetail = function (OrderNumber) {
            stackView.pushViewDetail({
                controller: 'TrackingList',
                formObject: fo, url: 'Tracking',
                formName: 'TrackingList'
            });

            $state.go('TrackingDetail', { OrderNumber: OrderNumber });
        };

        fo.search = function () {

            fo.vm.SearchList = angular.copy(fo.lv.searchList);
            TrackingListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
            });
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

        function submitListOperation() {
            void 0;
            TrackingListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('app.ordersTracking', [
        // Angular modules 

        // Custom modules 

        // 3rd Party Modules
        
    ]);
})();
angular.module('app.ordersTracking').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $stateProvider
    .state('Tracking', {
        url: '/orders',
        templateUrl: '/app/designer/orderTracking/list.html',
        resolve: {
            initialdataofTrackinglist: ['TrackingListFactory', '$q',
                function (TrackingListFactory, $q) {

                    var promises = {
                        vm: TrackingListFactory.getList(),
                        sl: TrackingListFactory.getstatuslist()
                    };

                    return $q.all(promises).then(function (values) {
                        var initdata = {};
                        initdata.viewmodel = values.vm;
                        initdata.statuslist = values.sl;
                        return initdata;
                    });
                }]
        },
        controller: 'TrackingList',
        controllerAs: 'fo'
    })

    .state('TrackingDetail', {
        url: '/trackingDetail/:OrderNumber',
        templateUrl: '/app/designer/orderTracking/detail.html',
        resolve: {
            InitialDataOfOrderDetail: ['OrderDetailFactory', '$q', '$stateParams',
                function (OrderDetailFactory, $q, $stateParams) {
                    var promises = {
                        vm: OrderDetailFactory.getDefaultViewModel($stateParams.OrderNumber),
                    };
                    return $q.all(promises).then(function (values) {
                        var initData = {};
                        initData.viewModel = values.vm;
                        return initData;
                    });
                }]
        },
        controller: 'TrackingDetail',
        controllerAs: 'fo'
    });



}]);
(function () {
    'use strict';

    angular.module('app.colorChart', [
        'ui.router'
    ]);
})();
angular.module('app.colorChart').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('ColorChartList', {
           url: '/colorChartList',
           templateUrl: 'app/master/colorChart/list.html',
           resolve: {
               initialDataOfColorChartList: ['ColorChartListFactory', '$q',
                   function (ColorChartListFactory, $q) {
                       var promises = {
                           vm: ColorChartListFactory.getDefaultViewModel(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           return initData;
                       });

                   }]
           },
           controller: 'ColorChartList',
           controllerAs: 'fo'
       })

     .state('ColorChartUpdate', {
         url: '/colorChartUpdate/:ID',
         templateUrl: 'app/master/colorChart/update.html',
         resolve: {
             initialDataOfColorChartUpdate: ['ColorChartUpdateFactory', '$q', '$stateParams',
                 function (ColorChartUpdateFactory, $q, $stateParams) {
                     var promises = {
                         vm: ColorChartUpdateFactory.getDefaultViewModel($stateParams.ID),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         return initData;
                     });

                 }]
         },
         controller: 'ColorChartUpdate',
         controllerAs: 'fo'
     })

    .state('ColorChartCreate', {
        url: '/colorChartCreate',
        templateUrl: 'app/master/colorChart/create.html',
        resolve: {
            initialDataOfColorChartCreate: ['ColorChartCreateFactory', '$q',
                function (ColorChartCreateFactory, $q) {
                    var promises = {
                        vm: ColorChartCreateFactory.getDefaultViewModel(),
                    };
                    return $q.all(promises).then(function (values) {
                        var initData = {};
                        initData.viewModel = values.vm;
                        return initData;
                    });
                }]
        },
        controller: 'ColorChartCreate',
        controllerAs: 'fo'
    });
}]);
(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .factory('ColorChartCreateFactory', ColorChartCreateFactory);

    ColorChartCreateFactory.$inject = ['$http', '$q', 'appUrl'];

    function ColorChartCreateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/ColorChart/Default').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/ColorChart', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .controller('ColorChartCreate', ColorChartCreate);

    ColorChartCreate.$inject = ['$location', '$state', '$scope', 'helper', 'ColorChartCreateFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfColorChartCreate'];

    function ColorChartCreate($location, $state, $scope, helper, ColorChartCreateFactory, message, stackView, $ngBootbox, $timeout, initialDataOfColorChartCreate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Add Color';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfColorChartCreate.viewModel;
            void 0;
            fo.lv.uploadImage = ' ';
            fo.vm.IsAllowForSale = true;
        }

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.ColorCreateForm.$dirty || fo.lv.uploadImage !== ' ') {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.clearImage = function () {
            $('#img').val(null);
            fo.lv.uploadImage = ' ';
            fo.vm.ImageBuffer = null;
        };

        fo.Save = function () {
            if ($scope.ColorCreateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.vm.Price <= 0) {
                message.showClientSideErrors('Please enter price.');
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.lv.uploadImage === ' ') {
                message.showClientSideErrors('Please select color image.');
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                if (image.test(fo.lv.uploadImage)) {
                    if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                        fo.vm.ImageBuffer = fo.lv.uploadImage;
                        fo.vm.ImageBuffer = fo.vm.ImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                        fo.vm.isNew = true;
                    }
                }
            }
            ColorChartCreateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.ColorCreateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .factory('ColorChartListFactory', ColorChartListFactory);

    ColorChartListFactory.$inject = ['$http', '$q', 'appUrl'];

    function ColorChartListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/ColorChart/List').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/ColorChart/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .controller('ColorChartList', ColorChartList);

    ColorChartList.$inject = ['$location', '$state', 'ColorChartListFactory', 'stackView', 'initialDataOfColorChartList'];

    function ColorChartList($location, $state, ColorChartListFactory, stackView, initialDataOfColorChartList) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Color Chart';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'ColorChartList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfColorChartList.viewModel;
                void 0;
            }
        }

        fo.OpenDetail = function (id) {
            stackView.pushViewDetail({
                controller: 'ColorChartList',
                formObject: fo, url: 'ColorChartList',
                formName: 'ColorChartList'
            });
            $state.go('ColorChartUpdate', { ID: id, redirect: true });
        };

        fo.Create = function () {
            stackView.pushViewDetail({
                controller: 'ColorChartList',
                formObject: fo, url: 'ColorChartList',
                formName: 'ColorChartList'
            });
            $state.go('ColorChartCreate');
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            ColorChartListFactory.submit(fo.vm).then(function (data) {
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .factory('ColorChartUpdateFactory', ColorChartUpdateFactory);

    ColorChartUpdateFactory.$inject = ['$http', '$q', 'appUrl'];

    function ColorChartUpdateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel(id) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/ColorChart/' + id).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/ColorChart', viewModel)
            .then(function (response) {
                def.resolve(response.data);
            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.colorChart')
        .controller('ColorChartUpdate', ColorChartUpdate);

    ColorChartUpdate.$inject = ['$location', '$state', '$scope', 'helper', 'ColorChartUpdateFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfColorChartUpdate'];

    function ColorChartUpdate($location, $state, $scope, helper, ColorChartUpdateFactory, message, stackView, $ngBootbox, $timeout, initialDataOfColorChartUpdate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Edit Color';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfColorChartUpdate.viewModel;
            void 0;
            if (fo.vm.ImageBuffer !== null && fo.vm.ImageBuffer !== ' ') {
                fo.lv.uploadImage = 'data:image/png;base64,' + fo.vm.ImageBuffer.toString();
            }
            else {
                fo.lv.uploadImage = ' ';
                fo.vm.ImageBuffer = null;
            }
        }

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.ColorUpdateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.clearImage = function () {
            $('#img').val(null);
            fo.lv.uploadImage = ' ';
            fo.vm.ImageBuffer = null;
        };

        fo.Save = function () {
            if ($scope.ColorUpdateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.lv.uploadImage === ' ') {
                message.showClientSideErrors('Please select color image.');
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.vm.ImageBuffer !== fo.lv.uploadImage) {
                if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                    var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                    if (image.test(fo.lv.uploadImage)) {
                        if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                            fo.vm.ImageBuffer = fo.lv.uploadImage;
                            fo.vm.ImageBuffer = fo.vm.ImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                            fo.vm.isNew = true;
                        }
                    }
                }
            }
            ColorChartUpdateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.ColorUpdateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

    }
})();

(function () {
    'use strict';

    angular.module('app.customers', [
         'ui.router'
    ]);
})();
angular.module('app.customers').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('CustomersList', {
           url: '/customerslist',
           templateUrl: 'app/master/customers/list.html',
           resolve: {
               initialDataOfCustomersList: ['CustomersListFactory', '$q',
                   function (CustomersListFactory, $q) {
                       var promises = {
                           vm: CustomersListFactory.getDefaultViewModel(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           return initData;
                       });
                   }]
           },
           controller: 'CustomersList',
           controllerAs: 'fo'
       })

     .state('CustomersDetail', {
         url: '/customersdetail/:ID',
         templateUrl: 'app/master/customers/detail.html',
         resolve: {
             initialDataOfCustomersDetail: ['CustomersDetailFactory', '$q', '$stateParams',
                 function (CustomersDetailFactory, $q, $stateParams) {
                     var promises = {
                         vm: CustomersDetailFactory.getDefaultViewModel($stateParams.ID),
                         cl: CustomersDetailFactory.getCountryList(),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         initData.countryList = values.cl;
                         return initData;
                     });
                 }]
         },
         controller: 'CustomersDetail',
         controllerAs: 'fo'
     });
}]);
(function () {
    'use strict';

    angular
        .module('app.customers')
        .factory('CustomersDetailFactory', CustomersDetailFactory);

    CustomersDetailFactory.$inject = ['$http', '$q', 'appUrl'];

    function CustomersDetailFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            deleteCustomer: deleteCustomer,
            getCountryList: getCountryList,
            getStateList: getStateList,
            downloadVectorFile: downloadVectorFile,
            downloadDesignImageFile: downloadDesignImageFile,
            downloadUserFile: downloadUserFile,
            downloadCustomerFile: downloadCustomerFile
        };

        return service;

        function getDefaultViewModel(customerID) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + customerID).then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/CustomerDetail', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function deleteCustomer(ViewModel) {
            var def = $q.defer();
            $http.delete(appUrl + 'Master/CustomerDetail', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getCountryList() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/CountryList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getStateList(countryID) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + countryID + '/StateList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadVectorFile(number) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + number + '/DownloadVectorFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadDesignImageFile(number) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + number + '/DownloadDesignImageFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadUserFile(number) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + number + '/DownloadUserFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function downloadCustomerFile(number) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + number + '/DownloadCustomerFile').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.customers')
        .controller('CustomersDetail', CustomersDetail);

    CustomersDetail.$inject = ['$location', '$scope', '$state', 'helper', 'CustomersDetailFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfCustomersDetail'];

    function CustomersDetail($location, $scope, $state, helper, CustomersDetailFactory, message, stackView, $ngBootbox, $timeout, initialDataOfCustomersDetail) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Customer Detail';
        fo.lv.isDropDown = false;
        fo.vm.deleteViewModel = {};
        initializeController();

        function initializeController() {
            fo.vm = initialDataOfCustomersDetail.viewModel;
            fo.vm.RemoveUserFileList = [];
            fo.vm.RemoveCustomerFileList = [];
            fo.vm.RemoveCustomerDesignList = [];
            fo.lv.countryList = initialDataOfCustomersDetail.countryList;
            fo.vm.deleteViewModel = {
                ID: fo.vm.CustomerID,
                Name: fo.vm.FullName,
                UpdatedTS: fo.vm.UpdatedTS
            };
            getState();
            void 0;
        }

        fo.getState = function () {
            getState();
        };

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.CustomerDetailForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.Save = function () {
            if ($scope.CustomerDetailForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            CustomersDetailFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.CustomerDetailForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

        fo.Delete = function () {
            var options = {
                message: 'Do you want to delete the customer detail?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            CustomersDetailFactory.deleteCustomer(fo.vm.deleteViewModel).then(function (data) {
                                if (data.Result === 1) // Success
                                {
                                    message.showServerSideMessage(data, true);
                                    $scope.CustomerDetailForm.$setPristine();
                                    stackView.closeThisView();
                                }
                            });
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.deleteCustomerFile = function (file, index) {
            var options = {
                message: 'Do you want to delete the file ' + file + '?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            fo.vm.RemoveCustomerFileList.push(fo.vm.CustomerFileList[index]);
                            fo.vm.CustomerFileList.splice(index, 1);
                            void 0;
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.deleteCustomerDesign = function (design, index) {
            var options = {
                message: 'Do you want to delete the design ' + design + '?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            fo.vm.RemoveCustomerDesignList.push(fo.vm.CustomerDesignList[index]);
                            fo.vm.CustomerDesignList.splice(index, 1);
                            void 0;
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.deleteOtherFiles = function (file, index) {
            var options = {
                message: 'Do you want to delete the file ' + file + '?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            fo.vm.RemoveUserFileList.push(fo.vm.UserFileList[index]);
                            fo.vm.UserFileList.splice(index, 1);
                            void 0;
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.downloadVectorFile = function (item) {
            CustomersDetailFactory.downloadVectorFile(item).then(function (data) {
                void 0;
                if (data !== null) {
                    item.image = 'data:image/png;base64,' + data.toString();
                }
            });
        };

        fo.downloadDesignImageFile = function (item) {
            CustomersDetailFactory.downloadDesignImageFile(item.DesignNumber).then(function (data) {
                void 0;
                if (data !== null) {
                    item.image = 'data:image/png;base64,' + data.toString();
                }
            });
        };

        fo.downloadUserFile = function (item) {
            CustomersDetailFactory.downloadUserFile(item.DesignNumber).then(function (data) {
                void 0;
                if (data !== null) {
                    item.image = 'data:image/png;base64,' + data.toString();
                }
            });
        };

        fo.downloadCustomerFile = function (item) {
            CustomersDetailFactory.downloadCustomerFile(item.FileNumber).then(function (data) {
                void 0;
                if (data !== null) {
                    item.image = 'data:image/png;base64,' + data.toString();
                }
            });
        };

        function getState() {
            if (fo.vm.CountryID === 38 || fo.vm.CountryID === 231) {
                fo.lv.isDropDown = true;
                CustomersDetailFactory.getStateList(fo.vm.CountryID).then(function (data) {
                    fo.lv.stateList = data;
                    void 0;
                });
            }
            else {
                fo.lv.isDropDown = false;
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.customers')
        .factory('CustomersListFactory', CustomersListFactory);

    CustomersListFactory.$inject = ['$http', '$q', 'appUrl'];

    function CustomersListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            getCustomerList: getCustomerList
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/List').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/CustomerDetail/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getCustomerList(codeName) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/CustomerDetail/' + codeName + '/CustomerList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.customers')
        .controller('CustomersList', CustomersList);

    CustomersList.$inject = ['$location', '$state', 'CustomersListFactory', 'initialDataOfCustomersList', 'stackView'];

    function CustomersList($location, $state, CustomersListFactory, initialDataOfCustomersList, stackView) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Customers';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'CustomersList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfCustomersList.viewModel;
                void 0;
            }
        }

        fo.OpenDetail = function (customerId) {
            stackView.pushViewDetail({
                controller: 'CustomersList',
                formObject: fo, url: 'CustomersList',
                formName: 'CustomersList'
            });
            $state.go('CustomersDetail', { ID: customerId, redirect: true });
        };

        fo.search = function () {
            fo.vm.SearchList[0].Value = fo.lv.Customer;
            fo.vm.Data = [];
            submitListOperation();
        };

        fo.setIdOfCustomer = function (obj) {
            void 0;
        };

        fo.getCustomerList = function (searchParam) {
            return CustomersListFactory.getCustomerList(searchParam).then(function (data) {
                void 0;
                return data;
            });
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToOlderPages': {
                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }
                case 'NavigateToNewerPages': {
                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }
                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }
                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            void 0;
            CustomersListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

    }
})();

(function () {
    'use strict';

    angular
        .module('app.feedback')
        .factory('FeedbackDetailFactory', FeedbackDetailFactory);

    FeedbackDetailFactory.$inject = ['$http', '$q', 'appUrl'];

    function FeedbackDetailFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            deleteFeedback: deleteFeedback
        };

        return service;

        function getDefaultViewModel(customerId, designNo) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/Feedback/' + customerId +'/'+ designNo + '/GetByID').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/Feedback', ViewModel).then(function (response) {
                def.resolve(response.data);
            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function deleteFeedback(customerId, designNo) {
            var def = $q.defer();
            $http.delete(appUrl + 'Master/Feedback/' + customerId + '/' + designNo + '/DeleteFeedback').then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.feedback')
        .controller('FeedbackDetail', FeedbackDetail);

    FeedbackDetail.$inject = ['$location', '$scope', '$state', 'helper', 'FeedbackDetailFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfFeedbackDetail'];

    function FeedbackDetail($location, $scope, $state, helper, FeedbackDetailFactory, message, stackView, $ngBootbox, $timeout, initialDataOfFeedbackDetail) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.sm = {};
        fo.lv.title = 'Feedback Detail';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfFeedbackDetail.viewModel.ReturnedData;
            void 0;
        }

        fo.Cancel = function () {
            var obj = stackView.getLastViewDetail();
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            if (obj.formName !== 'FeedbackList') {
                                stackView.closeView();
                                return;
                            }
                            else {
                                stackView.closeView();
                            }
                        }
                    }
                }
            };
            if ($scope.FeedbackDetailForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                if (obj.formName !== 'FeedbackList') {
                    stackView.closeView();
                    return;
                }
                else {
                    stackView.closeView();
                }
            }
        };

        fo.Save = function () {
            if ($scope.FeedbackDetailForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            FeedbackDetailFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.FeedbackDetailForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

        fo.Delete = function (customerId, designNo) {
            var options = {
                message: 'Do you want to delete the feedback?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            FeedbackDetailFactory.deleteFeedback(customerId, designNo).then(function (data) {
                                if (data.Result === 1) // Success
                                {
                                    message.showServerSideMessage(data, true);
                                    $scope.FeedbackDetailForm.$setPristine();
                                    stackView.closeThisView();
                                }
                            });
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

    }
})();

(function () {
    'use strict';

    angular.module('app.feedback', [
       'ui.router'
    ]);
})();
angular.module('app.feedback').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('FeedbackList', {
           url: '/feedbacklist',
           templateUrl: 'app/master/feedback/list.html',
           resolve: {
               initialDataOfFeedbackList: ['FeedbackListFactory', '$q',
                   function (FeedbackListFactory, $q) {
                       var promises = {
                           vm: FeedbackListFactory.getDefaultViewModel(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           return initData;
                       });

                   }]
           },
           controller: 'FeedbackList',
           controllerAs: 'fo'
       })

     .state('FeedbackDetail', {
         url: '/feedbackdetail/:ID/:DesignNo',
         templateUrl: 'app/master/feedback/detail.html',
         resolve: {
             initialDataOfFeedbackDetail: ['FeedbackDetailFactory', '$q', '$stateParams',
                 function (FeedbackDetailFactory, $q, $stateParams) {
                     var promises = {
                         vm: FeedbackDetailFactory.getDefaultViewModel($stateParams.ID, $stateParams.DesignNo),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         return initData;
                     });

                 }]
         },
         controller: 'FeedbackDetail',
         controllerAs: 'fo'
     });
}]);
(function () {
    'use strict';

    angular
        .module('app.feedback')
        .factory('FeedbackListFactory', FeedbackListFactory);

    FeedbackListFactory.$inject = ['$http', '$q', 'appUrl'];

    function FeedbackListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            getCustomerFeedbackList: getCustomerFeedbackList,
            getCustomerList: getCustomerList
        };
        
        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/Feedback/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }
        
        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/Feedback/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getCustomerFeedbackList() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/Feedback/GetFeedbackList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function getCustomerList(codeName) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/Feedback/' + codeName + '/GetCustomerList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.feedback')
        .controller('FeedbackList', FeedbackList);

    FeedbackList.$inject = ['$location', '$state', 'FeedbackListFactory', 'stackView', 'initialDataOfFeedbackList', 'helper', '$scope'];

    function FeedbackList($location, $state, FeedbackListFactory, stackView, initialDataOfFeedbackList, helper, $scope) {
        /* jshint validthis:true */

        /////////// Variable declaration starts here //////////////

        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Feedback';
        fo.sm = {};
        fo.lv.setFooterPaddingNoRecord = null;
        setMinMaxDate(new Date(), new Date());

        //////////// Variable declaration. ends here//////////////

        /////////// Initilize controller starts here ////////////

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'FeedbackList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfFeedbackList.viewModel;
                fo.lv.currentDate = new Date();
                fo.lv.StartDate = fo.lv.EndDate = fo.lv.currentDate;
                setMinMaxDate();
                void 0;
            }
        }

        /////////// Initilize controller ends here //////////////

        ////////////// Click methods start here ////////////////

        fo.OpenDetail = function (customerId, designNo) {
            stackView.pushViewDetail({
                controller: 'FeedbackList',
                formObject: fo, url: 'FeedbackList',
                formName: 'FeedbackList'
            });
            $state.go('FeedbackDetail', { ID: customerId, DesignNo: designNo, redirect: true });
        };

        fo.search = function () {
            if ($scope.FeedbackListForm.$invalid) {
                void 0;
                helper.scrollToError();
                return;
            }
            fo.vm.SearchList[0].Value = helper.formatDate(fo.lv.StartDate);
            fo.vm.SearchList[1].Value = helper.formatDate(fo.lv.EndDate);
            fo.vm.Data = [];
            submitListOperation();
        };

        fo.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            if (fo.openedStart === true) {
                fo.openedStart = false;
            }
            else if (opened === 'openedStart') {

                fo.openedEnd = false;
                fo.openedStart = true;
            }
            if (fo.openedEnd === true) {
                fo.openedEnd = false;
            }
            else if (opened === 'openedEnd') {
                fo.openedStart = false;
                fo.openedEnd = true;
            }
        };

        fo.setDate = function (startDate, endDate, name) {
            if (name === 'startDate' && new Date(startDate) > new Date(endDate)) {
                fo.lv.EndDate = startDate;
            }
            if (name === 'endDate' && new Date(endDate) < new Date(startDate)) {
                fo.lv.StartDate = endDate;
            }
            setMinMaxDate(fo.lv.StartDate);
        };

        fo.setIdOfCustomer = function (obj) {
            fo.vm.SearchList[2].Value = obj.Value;
        };

        fo.getCustomerList = function (searchParam) {
            return FeedbackListFactory.getCustomerList(searchParam).then(function (data) {
                return data;
            });
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        //////////////////Click Methods Ends Here///////////////////

        //////////////////Helper methods starts Here////////////////

        function setMinMaxDate(dateFrom) {
            fo.lv.startDateOptions = {
                startingDay: 1,
                showWeeks: false,
                initDate: null,
            };
            fo.lv.endDateOptions = {
                startingDay: 1,
                showWeeks: false,
                initDate: null,
                minDate: dateFrom,
            };
        }

        function submitListOperation() {
            FeedbackListFactory.submit(fo.vm).then(function (data) {
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

        //////////////////Helper methods ends Here/////////////////

    }
})();

(function () {
    'use strict';

    angular
        .module('app.orderTracking')
        .factory('OrderTrackingListFactory', OrderTrackingListFactory);

    OrderTrackingListFactory.$inject = ['$http', '$q', 'appUrl'];

    function OrderTrackingListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            getStatusList: getStatusList
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/OrderTracking/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/OrderTracking/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getStatusList() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/OrderTracking/GetStatusList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.orderTracking')
        .controller('OrderTrackingList', OrderTrackingList);

    OrderTrackingList.$inject = ['$location', '$state', 'OrderTrackingListFactory', 'initialDataOfOrderTrackingList', 'stackView'];

    function OrderTrackingList($location, $state, OrderTrackingListFactory, initialDataOfOrderTrackingList, stackView) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Order Tracking Number';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'OrderTrackingList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfOrderTrackingList.viewModel;
                void 0;
                fo.lv.statusList = initialDataOfOrderTrackingList.statusList;
                fo.lv.StatusID = 1;
                fo.vm.SearchList[0].Value = fo.lv.StatusID;
                submitListOperation();
            }
        }

        fo.OpenDetail = function (orderNo) {
            stackView.pushViewDetail({
                controller: 'OrderTrackingList',
                formObject: fo, url: 'OrderTrackingList',
                formName: 'OrderTrackingList'
            });
            $state.go('OrderTrackingUpdate', { OrderNo: orderNo, redirect: true });
        };

        fo.search = function () {
            fo.vm.SearchList[0].Value = fo.lv.StatusID;
            submitListOperation();
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }
                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }
                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }
                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }
                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }
                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            void 0;
            OrderTrackingListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

    }
})();

(function () {
    'use strict';

    angular.module('app.orderTracking', [
                'ui.router'
    ]);
})();
angular.module('app.orderTracking').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('OrderTrackingList', {
           url: '/orderTrackingList',
           templateUrl: 'app/master/orderTracking/list.html',
           resolve: {
               initialDataOfOrderTrackingList: ['OrderTrackingListFactory', '$q',
                   function (OrderTrackingListFactory, $q) {
                       var promises = {
                           vm: OrderTrackingListFactory.getDefaultViewModel(),
                           sl: OrderTrackingListFactory.getStatusList(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           initData.statusList = values.sl;
                           return initData;
                       });
                   }]
           },
           controller: 'OrderTrackingList',
           controllerAs: 'fo'
       })

      .state('OrderTrackingUpdate', {
          url: '/orderTrackingupdate/:OrderNo',
          templateUrl: 'app/master/orderTracking/update.html',
          resolve: {
              initialDataOfOrderTrackingUpdate: ['OrderTrackingUpdateFactory', '$q', '$stateParams',
                  function (OrderTrackingUpdateFactory, $q, $stateParams) {
                      var promises = {
                          vm: OrderTrackingUpdateFactory.getDefaultViewModel($stateParams.OrderNo),
                      };
                      return $q.all(promises).then(function (values) {
                          var initData = {};
                          initData.viewModel = values.vm;
                          return initData;
                      });
                  }]
          },
          controller: 'OrderTrackingUpdate',
          controllerAs: 'fo'
      });
}]);
(function () {
    'use strict';

    angular
        .module('app.orderTracking')
        .factory('OrderTrackingUpdateFactory', OrderTrackingUpdateFactory);

    OrderTrackingUpdateFactory.$inject = ['$http', '$q', 'appUrl'];

    function OrderTrackingUpdateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel(orderNo) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/OrderTracking/' + orderNo + '/GetByID').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/OrderTracking', ViewModel).then(function (response) {
                def.resolve(response.data);
            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.orderTracking')
        .controller('OrderTrackingUpdate', OrderTrackingUpdate);

    OrderTrackingUpdate.$inject = ['$location', '$state', '$scope', 'message', 'stackView', '$ngBootbox', '$timeout', 'OrderTrackingUpdateFactory', 'helper', 'initialDataOfOrderTrackingUpdate'];

    function OrderTrackingUpdate($location, $state, $scope, message, stackView, $ngBootbox, $timeout, OrderTrackingUpdateFactory, helper, initialDataOfOrderTrackingUpdate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Update Tracking Number';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfOrderTrackingUpdate.viewModel.ReturnedData;
            void 0;
        }

        fo.Save = function () {
            if ($scope.TrackingUpdateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            OrderTrackingUpdateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.TrackingUpdateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.TrackingUpdateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

    }
})();

(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .factory('PredefinedSizeCreateFactory', PredefinedSizeCreateFactory);

    PredefinedSizeCreateFactory.$inject = ['$http', '$q', 'appUrl'];

    function PredefinedSizeCreateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/PredefinedSize/Default').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/PredefinedSize', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .controller('PredefinedSizeCreate', PredefinedSizeCreate);

    PredefinedSizeCreate.$inject = ['$location', '$state', '$scope', 'helper', 'PredefinedSizeCreateFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfPredefinedSizeCreate'];

    function PredefinedSizeCreate($location, $state, $scope, helper, PredefinedSizeCreateFactory, message, stackView, $ngBootbox, $timeout, initialDataOfPredefinedSizeCreate) {
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Pre Defined Size Details';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfPredefinedSizeCreate.viewModel;
            void 0;
            fo.vm.Size = fo.vm.OneColorPrice = fo.vm.TwoColorPrice = fo.vm.MoreColorPrice = '';
        }

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.PredefinedSizeCreateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.Save = function () {
            if ($scope.PredefinedSizeCreateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            PredefinedSizeCreateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.PredefinedSizeCreateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

    }
})();

(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .factory('PredefinedSizeListFactory', PredefinedSizeListFactory);

    PredefinedSizeListFactory.$inject = ['$http', '$q', 'appUrl'];

    function PredefinedSizeListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            deleteSize: deleteSize
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/PredefinedSize/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/PredefinedSize/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function deleteSize(id) {
            var def = $q.defer();
            $http.delete(appUrl + 'Master/PredefinedSize/' + id + '/DeleteSize').then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .controller('PredefinedSizeList', PredefinedSizeList);

    PredefinedSizeList.$inject = ['$location', '$state', 'PredefinedSizeListFactory', '$ngBootbox', '$timeout', 'initialDataOfPredefinedSizeList', 'stackView', 'message'];

    function PredefinedSizeList($location, $state, PredefinedSizeListFactory, $ngBootbox, $timeout, initialDataOfPredefinedSizeList, stackView, message) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Pre Defined Size';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'PredefinedSizeList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfPredefinedSizeList.viewModel;
                void 0;
            }
        }

        fo.OpenDetail = function (id) {
            stackView.pushViewDetail({
                controller: 'PredefinedSizeList',
                formObject: fo, url: 'PredefinedSizeList',
                formName: 'PredefinedSizeList'
            });
            $state.go('PredefinedSizeUpdate', { ID: id, redirect: true });
        };

        fo.Create = function () {
            stackView.pushViewDetail({
                controller: 'PredefinedSizeList',
                formObject: fo, url: 'PredefinedSizeList',
                formName: 'PredefinedSizeList'
            });
            $state.go('PredefinedSizeCreate');
        };

        fo.deleteSize = function (id) {
            var options = {
                message: 'Do you want to delete the pre defined size?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            PredefinedSizeListFactory.deleteSize(id).then(function (data) {
                                if (data.Result === 1) // Success
                                {
                                    message.showServerSideMessage(data, true);
                                    $state.reload();
                                }
                            });
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            PredefinedSizeListFactory.submit(fo.vm).then(function (data) {
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

    }
})();

(function () {
    'use strict';

    angular.module('app.predefinedSize', [
         'ui.router'
    ]);
})();
angular.module('app.predefinedSize').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('PredefinedSizeList', {
           url: '/predefinedSizeList',
           templateUrl: 'app/master/predefinedSize/list.html',
           resolve: {
               initialDataOfPredefinedSizeList: ['PredefinedSizeListFactory', '$q',
                   function (PredefinedSizeListFactor, $q) {
                       var promises = {
                           vm: PredefinedSizeListFactor.getDefaultViewModel(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           return initData;
                       });

                   }]
           },
           controller: 'PredefinedSizeList',
           controllerAs: 'fo'
       })

     .state('PredefinedSizeUpdate', {
         url: '/update/:ID',
         templateUrl: 'app/master/predefinedSize/update.html',
         resolve: {
             initialDataOfPredefinedSizeUpdate: ['PredefinedSizeUpdateFactory', '$q', '$stateParams',
                 function (PredefinedSizeUpdateFactory, $q, $stateParams) {
                     var promises = {
                         vm: PredefinedSizeUpdateFactory.getDefaultViewModel($stateParams.ID),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         return initData;
                     });

                 }]
         },
         controller: 'PredefinedSizeUpdate',
         controllerAs: 'fo'
     })

     .state('PredefinedSizeCreate', {
         url: '/create',
         templateUrl: 'app/master/predefinedSize/create.html',
         resolve: {
             initialDataOfPredefinedSizeCreate: ['PredefinedSizeCreateFactory', '$q',
                 function (PredefinedSizeCreateFactory, $q) {
                     var promises = {
                         vm: PredefinedSizeCreateFactory.getDefaultViewModel(),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         return initData;
                     });
                 }]
         },
         controller: 'PredefinedSizeCreate',
         controllerAs: 'fo'
     });
}]);
(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .factory('PredefinedSizeUpdateFactory', PredefinedSizeUpdateFactory);

    PredefinedSizeUpdateFactory.$inject = ['$http', '$q', 'appUrl'];

    function PredefinedSizeUpdateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel(id) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/PredefinedSize/' + id + '/GetByID').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/PredefinedSize', viewModel)
            .then(function (response) {
                def.resolve(response.data);
            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.predefinedSize')
        .controller('PredefinedSizeUpdate', PredefinedSizeUpdate);

    PredefinedSizeUpdate.$inject = ['$location', '$state', '$scope', 'PredefinedSizeUpdateFactory', 'helper', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfPredefinedSizeUpdate'];

    function PredefinedSizeUpdate($location, $state, $scope, PredefinedSizeUpdateFactory, helper, message, stackView, $ngBootbox, $timeout, initialDataOfPredefinedSizeUpdate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Pre Defined Size Details';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfPredefinedSizeUpdate.viewModel.ReturnedData;
            void 0;
        }

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.PredefinedSizeUpdateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.Save = function () {
            if ($scope.PredefinedSizeUpdateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            PredefinedSizeUpdateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.PredefinedSizeUpdateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };
    }
})();

(function () {
    'use strict';

    angular
        .module('app.report')
        .factory('SalesReportListFactory', SalesReportListFactory);

    SalesReportListFactory.$inject = ['$http', '$q', 'appUrl'];

    function SalesReportListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            getDesignerList: getDesignerList
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Report/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Report/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getDesignerList() {
            var def = $q.defer();
            $http.get(appUrl + 'Report/DesignerList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.report')
        .controller('SalesReportList', SalesReportList);

    SalesReportList.$inject = ['$location', 'SalesReportListFactory', 'initialDataOfSalesReportList', 'stackView', 'helper'];

    function SalesReportList($location, SalesReportListFactory, initialDataOfSalesReportList, stackView, helper) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Sales Report';
        fo.lv.designerList = [];
        fo.lv.setFooterPaddingNoRecord = null;
        setMinMaxDate(new Date(), new Date());

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'SalesReportList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfSalesReportList.viewModel;
                fo.lv.designerList = initialDataOfSalesReportList.designerList;
                fo.lv.DesignerID = '0';
                fo.lv.currentDate = new Date();
                fo.lv.StartDate = fo.lv.EndDate = fo.lv.currentDate;
                setMinMaxDate();
                void 0;
            }
        }

        fo.open = function ($event, opened) {
            $event.preventDefault();
            $event.stopPropagation();
            if (fo.openedStart === true) {
                fo.openedStart = false;
            }
            else if (opened === 'openedStart') {

                fo.openedEnd = false;
                fo.openedStart = true;
            }
            if (fo.openedEnd === true) {
                fo.openedEnd = false;
            }
            else if (opened === 'openedEnd') {
                fo.openedStart = false;
                fo.openedEnd = true;
            }
        };

        fo.search = function () {
            fo.vm.SearchList[0].Value = helper.formatDate(fo.lv.StartDate);
            fo.vm.SearchList[1].Value = helper.formatDate(fo.lv.EndDate);
            fo.vm.SearchList[2].Value = fo.lv.DesignerID;
            fo.vm.Data = [];
            submitListOperation();
        };

        fo.setDate = function (startDate, endDate, name) {
            if (name === 'startDate' && new Date(startDate) > new Date(endDate)) {
                fo.lv.EndDate = startDate;
            }
            if (name === 'endDate' && new Date(endDate) < new Date(startDate)) {
                fo.lv.StartDate = endDate;
            }
            setMinMaxDate(fo.lv.StartDate);
        };

        function setMinMaxDate(dateFrom) {
            fo.lv.startDateOptions = {
                startingDay: 1,
                showWeeks: false,
                initDate: null,
            };
            fo.lv.endDateOptions = {
                startingDay: 1,
                showWeeks: false,
                initDate: null,
                minDate: dateFrom,
            };
        }

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            void 0;
            SalesReportListFactory.submit(fo.vm).then(function (data) {
                void 0;
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }

    }
})();

(function () {
    'use strict';

    angular.module('app.report', [
          'ui.router'
    ]);
})();
angular.module('app.report').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('SalesReportList', {
           url: '/report',
           templateUrl: 'app/master/salesReport/list.html',
           resolve: {
               initialDataOfSalesReportList: ['SalesReportListFactory', '$q',
                   function (SalesReportListFactory, $q) {
                       var promises = {
                           vm: SalesReportListFactory.getDefaultViewModel(),
                           dl: SalesReportListFactory.getDesignerList(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           initData.designerList = values.dl;
                           return initData;
                       });

                   }]
           },
           controller: 'SalesReportList',
           controllerAs: 'fo'
       });
}]);
(function () {
    'use strict';

    angular
        .module('app.users')
        .factory('UsersCreateFactory', UsersCreateFactory);

    UsersCreateFactory.$inject = ['$http', '$q', 'appUrl'];

    function UsersCreateFactory($http, $q, appUrl) {
        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            getRoleList: getRoleList
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/User/Default').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/User', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function getRoleList() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/User/UserTypeList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.users')
        .controller('UsersCreate', UsersCreate);

    UsersCreate.$inject = ['$location', '$scope', 'helper', 'UsersCreateFactory', '$state', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfUsersCreate'];

    function UsersCreate($location, $scope, helper, UsersCreateFactory, $state, message, stackView, $ngBootbox, $timeout, initialDataOfUsersCreate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Add User';
        fo.lv.showSkypeId = false;
        fo.lv.rolelist = [];

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfUsersCreate.viewModel;
            fo.lv.rolelist = initialDataOfUsersCreate.roleList;
            void 0;
            void 0;
            fo.vm.UserTypeID = 1;
            fo.lv.uploadImage = ' ';
        }

        fo.userRole = function (selectedUserTypeID) {
            if (selectedUserTypeID === 2) { // Designer
                fo.lv.showSkypeId = true;
            }
            else {
                fo.lv.showSkypeId = false;
            }
        };

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.UserCreateForm.$dirty || fo.lv.uploadImage !== ' ') {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.clearImage = function () {
            $('#img').val(null);
            fo.lv.uploadImage = ' ';
            fo.vm.ImageBuffer = null;
        };

        fo.Save = function () {
            if ($scope.UserCreateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            angular.forEach(fo.lv.rolelist, function (value) {
                if (value.Value === fo.vm.UserTypeID) {
                    fo.vm.UserType = value.Text;
                }
            });
            if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                if (image.test(fo.lv.uploadImage)) {
                    if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                        fo.vm.ImageBuffer = fo.lv.uploadImage;
                        fo.vm.ImageBuffer = fo.vm.ImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                        fo.vm.isNew = true;
                    }
                }
            }
            UsersCreateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.UserCreateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };

    }
})();

(function () {
    'use strict';

    angular
        .module('app.users')
        .factory('UsersListFactory', UsersListFactory);

    UsersListFactory.$inject = ['$http', '$q', 'appUrl'];

    function UsersListFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit,
            deleteUser: deleteUser
        };

        return service;

        function getDefaultViewModel() {
            var def = $q.defer();
            $http.get(appUrl + 'Master/User/GetList').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(ViewModel) {
            var def = $q.defer();
            $http.post(appUrl + 'Master/User/List', ViewModel).then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

        function deleteUser(Userid, updatedts) {
            var def = $q.defer();
            $http.delete(appUrl + 'Master/User/' + Userid + '/' + updatedts + '/Delete').then(function (response) {
                def.resolve(response.data);
            })
            .catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.users')
        .controller('UsersList', UsersList);

    UsersList.$inject = ['$location', '$state', 'stackView', 'UsersListFactory', '$ngBootbox', '$timeout', 'initialDataOfUsersList', 'message'];

    function UsersList($location, $state, stackView, UsersListFactory, $ngBootbox, $timeout, initialDataOfUsersList, message) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Users';

        initializeController();

        function initializeController() {
            var obj = stackView.getLastViewDetail();
            if (obj.formName === 'UsersList') {
                fo.vm = obj.formObject.vm;
                fo.lv = obj.formObject.lv;
                stackView.discardViewDetail();
            }
            else {
                fo.vm = initialDataOfUsersList.viewModel;
                void 0;
            }
        }

        fo.OpenDetail = function (id) {
            stackView.pushViewDetail({
                controller: 'UsersList',
                formObject: fo, url: 'UsersList',
                formName: 'UsersList'
            });
            $state.go('UsersUpdate', { ID: id, redirect: true });
        };

        fo.Create = function () {
            stackView.pushViewDetail({
                controller: 'UsersList',
                formObject: fo, url: 'UsersList',
                formName: 'UsersList'
            });
            $state.go('UsersCreate');
        };

        fo.deleteUser = function (id, updatedTS) {
            var options = {
                message: 'Do you want to delete the user?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            UsersListFactory.deleteUser(id, updatedTS).then(function (data) {
                                if (data.Result === 1) // Success
                                {
                                    message.showServerSideMessage(data, true);
                                    $state.reload();
                                }
                            });
                        }
                    }
                }
            };
            $ngBootbox.customDialog(options);
        };

        fo.listOperation = function (actionPerformed, currentPage, sortColumn) {
            switch (actionPerformed) {
                case 'NavigateToFirstPage':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToLastPage':
                    {
                        fo.vm.PageNumber = fo.lv.lastPage;
                        fo.vm.CurrentLastPage = fo.lv.lastPage;

                        if ((fo.lv.lastPage % fo.vm.PagerLimit) === 0) {
                            fo.vm.CurrentStartPage = (fo.lv.lastPage - (fo.vm.PagerLimit - 1));
                        }
                        else {

                            fo.vm.CurrentStartPage = (fo.lv.lastPage - ((fo.lv.lastPage % fo.vm.PagerLimit) - 1));
                        }
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();

                        break;
                    }

                case 'NavigateToPreviousPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber - 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToNextPage':
                    {
                        fo.vm.PageNumber = fo.vm.PageNumber + 1;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToAtPage':
                    {
                        fo.vm.PageNumber = currentPage;
                        fo.vm.CurrentOperation = 'CurrentPageChanged';
                        submitListOperation();
                        break;
                    }

                case 'NavigateToOlderPages': {

                    fo.vm.PageNumber = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentLastPage = fo.vm.CurrentStartPage - 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentStartPage - fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'NavigateToNewerPages': {

                    fo.vm.PageNumber = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentStartPage = fo.vm.CurrentLastPage + 1;
                    fo.vm.CurrentLastPage = fo.vm.CurrentLastPage + fo.vm.PagerLimit;
                    fo.vm.CurrentOperation = 'CurrentPageChanged';
                    submitListOperation();
                    break;
                }

                case 'ChangePageSize':
                    {
                        fo.vm.PageNumber = 1;
                        fo.vm.CurrentLastPage = null;
                        fo.vm.CurrentStartPage = 1;
                        fo.vm.CurrentOperation = 'PageSizeChanged';
                        submitListOperation();
                        break;
                    }

                case 'Sort':
                    {
                        fo.vm.Sort = sortColumn;
                        fo.vm.CurrentOperation = 'SortOrderChanged';
                        fo.vm.PageNumber = 1;
                        submitListOperation();
                        break;
                    }
            }
        };

        function submitListOperation() {
            UsersListFactory.submit(fo.vm).then(function (data) {
                fo.vm = data.ReturnedData;
                makePageNumber();
            });
        }

        function makePageNumber() {
            fo.lv.pageNumberList = [];
            fo.lv.lastPage = Math.ceil(parseFloat(fo.vm.RecordsCount) / parseFloat(fo.vm.PageSize));
            for (var i = 0; (i < fo.vm.PagerLimit && ((fo.vm.CurrentStartPage + i) <= fo.lv.lastPage)) ; i++) {
                fo.lv.pageNumberList.push(fo.vm.CurrentStartPage + i);
            }
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app.users')
        .factory('UsersUpdateFactory', UsersUpdateFactory);

    UsersUpdateFactory.$inject = ['$http', '$q', 'appUrl'];

    function UsersUpdateFactory($http, $q, appUrl) {

        var service = {
            getDefaultViewModel: getDefaultViewModel,
            submit: submit
        };

        return service;

        function getDefaultViewModel(id) {
            var def = $q.defer();
            $http.get(appUrl + 'Master/User/' + id + '/GetByID').then(function (response) {
                def.resolve(response.data);
            })
             .catch(function fail(error) {
                 void 0;
                 def.reject(error);
             });
            return def.promise;
        }

        function submit(viewModel) {
            var def = $q.defer();
            $http.put(appUrl + 'Master/User', viewModel)
            .then(function (response) {
                def.resolve(response.data);
            }).catch(function fail(error) {
                void 0;
                def.reject(error);
            });
            return def.promise;
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('app.users')
        .controller('UsersUpdate', UsersUpdate);

    UsersUpdate.$inject = ['$location', '$state', '$scope', 'helper', 'UsersUpdateFactory', 'message', 'stackView', '$ngBootbox', '$timeout', 'initialDataOfUsersUpdate'];

    function UsersUpdate($location, $state, $scope, helper, UsersUpdateFactory, message, stackView, $ngBootbox, $timeout, initialDataOfUsersUpdate) {
        /* jshint validthis:true */
        var fo = this;
        fo.vm = {};
        fo.lv = {};
        fo.lv.title = 'Edit User';

        initializeController();

        function initializeController() {
            fo.vm = initialDataOfUsersUpdate.viewModel.ReturnedData;
            void 0;
            if (fo.vm.ImageGUID !== null) {
                fo.lv.uploadImage = angular.copy(fo.vm.ImageGUID);
            }
            else {
                fo.lv.uploadImage = ' ';
                fo.vm.ImageBuffer = null;
            }
        }

        fo.Cancel = function () {
            var options = {
                message: 'Do you want to close the form?',
                buttons: {
                    success: {
                        label: ' ',
                        className: 'fa fa-check-page',
                        callback: function () {
                            $timeout(function () {
                            }, 100);
                            stackView.closeView();
                        }
                    }
                }
            };
            if ($scope.UserUpdateForm.$dirty) {
                $ngBootbox.customDialog(options);
            }
            else {
                stackView.closeView();
            }
        };

        fo.clearImage = function () {
            $('#img').val(null);
            fo.lv.uploadImage = ' ';
            fo.vm.ImageBuffer = null;
        };

        fo.Save = function () {
            if ($scope.UserUpdateForm.$invalid) {
                void 0;
                helper.scrollToError();
                fo.lv.isFormInvalid = true;
                return;
            }
            if (fo.lv.uploadImage !== fo.vm.ImageGUID) {
                if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null && angular.equals(' ', fo.lv.uploadImage) !== true) {
                    var image = new RegExp(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/);
                    if (image.test(fo.lv.uploadImage)) {
                        if (fo.lv.uploadImage !== undefined && fo.lv.uploadImage !== null) {
                            fo.vm.ImageBuffer = fo.lv.uploadImage;
                            fo.vm.ImageBuffer = fo.vm.ImageBuffer.replace(/^data:image\/(png|jpeg|jpg|gif|bmp);base64,/, '');
                            fo.vm.isNew = true;
                        }
                    }
                }
            }
            UsersUpdateFactory.submit(fo.vm).then(function (data) {
                if (data.Result === 1) // Success
                {
                    message.showServerSideMessage(data, true);
                    $scope.UserUpdateForm.$setPristine();
                    stackView.closeThisView();
                }
                helper.setIsSubmitted(false);
            });
        };
    }
})();

(function () {
    'use strict';

    angular.module('app.users', [
         'ui.router'
    ]);
})();
angular.module('app.users').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
    'use strict';
    $urlRouterProvider.otherwise('/');
    $stateProvider

       .state('UsersList', {
           url: '/usersList',
           templateUrl: 'app/master/users/list.html',
           resolve: {
               initialDataOfUsersList: ['UsersListFactory', '$q',
                   function (UsersListFactory, $q) {
                       var promises = {
                           vm: UsersListFactory.getDefaultViewModel(),
                       };
                       return $q.all(promises).then(function (values) {
                           var initData = {};
                           initData.viewModel = values.vm;
                           return initData;
                       });
                   }]
           },
           controller: 'UsersList',
           controllerAs: 'fo'
       })

     .state('UsersUpdate', {
         url: '/updateUser/:ID',
         templateUrl: 'app/master/users/update.html',
         resolve: {
             initialDataOfUsersUpdate: ['UsersUpdateFactory', '$q', '$stateParams',
                 function (UsersUpdateFactory, $q, $stateParams) {
                     var promises = {
                         vm: UsersUpdateFactory.getDefaultViewModel($stateParams.ID),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         return initData;
                     });
                 }]
         },
         controller: 'UsersUpdate',
         controllerAs: 'fo'
     })

     .state('UsersCreate', {
         url: '/createUser',
         templateUrl: 'app/master/users/create.html',
         resolve: {
             initialDataOfUsersCreate: ['UsersCreateFactory', '$q',
                 function (UsersCreateFactory, $q) {
                     var promises = {
                         vm: UsersCreateFactory.getDefaultViewModel(),
                         rl: UsersCreateFactory.getRoleList(),
                     };
                     return $q.all(promises).then(function (values) {
                         var initData = {};
                         initData.viewModel = values.vm;
                         initData.roleList = values.rl;
                         return initData;
                     });
                 }]
         },
         controller: 'UsersCreate',
         controllerAs: 'fo'
     });
}]);